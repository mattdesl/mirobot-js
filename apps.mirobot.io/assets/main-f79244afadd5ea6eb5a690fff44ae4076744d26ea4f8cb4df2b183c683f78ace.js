// Autogenerated on Tue Jun 28 2016 09:49:40 GMT+0100 (BST) - do not edit
var baseLanguages = ["en","vi","ca","de","es","fr","nl","no","pl","pt"];
var trans = {"en":{":save":"Save",":save-as":"Save as",":new-prog":"New program",":delete-prog":"Delete program",":download":"Download current program",":upload":"Upload program",":open":"Open program",":choose-name":"Choose the file name",":unsaved":"You have unsaved changes which will be lost. Do you want to continue?",":exists":"Error, file already exists with this name",":single-file":"Please select a single file to upload",":sure":"Are you sure you want to delete program",":permanent":"This is permanent and cannot be undone",":address":"Enter the address for your Mirobot here",":connect":"Connect",":connected":"Connected",":move-cmd":"Move [[direction]] by [[distance]] mm",":penup-cmd":"Pen up",":pendown-cmd":"Pen down",":turn-cmd":"Turn [[direction]] by [[angle]] degrees",":repeat-cmd":"Repeat [[count]] times",":beep-cmd":"Beep for [[duration]] seconds",":forward":"forward",":back":"back",":left":"left",":right":"right",":start-collision":"Start Collision Detection",":start-following":"Start Following Lines",":toolbox":"Toolbox",":program":"Program",":drag":"Drag functions from the left over here!",":run":"Run",":pause":"Pause",":stop":"Stop",":clear":"Clear",":show-help":"Show help",":hide-help":"Hide help",":js-help-title":"Controlling Mirobot with Javascript",":js-help-intro":"Use these simple commands to get started controlling Mirobot:",":js-forward-help":"move 100 mm forward",":js-back-help":"move 100mm back",":js-left-help":"turn 90 degrees to the left",":js-right-help":"turn 90 degrees to the right",":js-penup-help":"lift the pen up",":js-pendown-help":"lower the pen to draw",":js-beep-help":"make it beep",":hide-js":"Hide Javascript",":show-js":"Show Javascript",":100mm-grid":"100mm grid",":blockly":"Blockly",":blockly-desc":"This app allows more advanced programming techniques to be used to control Mirobot",":javascript":"Javascript",":javascript-desc":"Program Mirobot using the full power of Javascript directly from your browser",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"This is the built-in simple drag-and-drop app used to program Mirobot",":point-click":"Point & Click",":point-click-desc":"Click to control Mirobot and see the program it would use",":remote":"Remote Control",":remote-desc":"Use buttons to directly remote control your Mirobot",":snap":"Snap!",":snap-desc":"Snap! is very similar to Scratch and is good for using the addon sensors in code","Move forward by %n mm":"Move forward by %n mm","Move back by %n mm":"Move back by %n mm","Beep for %n seconds":"Beep for %n seconds","Stop":"Stop","Bump sensor":"Bump sensor","Line sensor":"Line sensor","When I bump into something":"When I bump into something","When the line sensor changes":"When the line sensor changes",":run-on-mirobot":"Run on Mirobot",":stop-mirobot":"Stop Mirobot",":simulate-program":"Simulate Program",":reset-simulation":"Reset Simulation",":view-js-code":"View JS Code",":clear-program":"Clear Program",":chrome":"Chrome App",":chrome-desc":"Check out the standalone Chrome App which lets you run all of the apps from this site.",":chrome-intro":"You can now run all of the Mirobot Apps from one downloadable Chrome App",":chrome-link":"Install it from the Chrome Web Store",":simulate":"Simulate",":hide-sim":"Hide until active",":fast-sim":"Speed up",":reset-sim":"Reset",":scratch":"Scratch",":scratch-desc":"Use Scratch to program your Mirobot (requires Flash)",":scratch-intro1":"Program Mirobot using the Scratch programming environment you know and love.",":scratch-intro2":"You'll need Flash support in your browser for this, if you don't have this (e.g. you're using iOS) you can try [[snap]]",":scratch-link":"Start Using Scratch!",":mirobot-connected":"Connected to Mirobot",":mirobot-error":"Error connecting to Mirobot",":mirobot-connecting":"Connecting to Mirobot",":scanning":"Scanning for networks",":no-networks":"No WiFi networks found",":reset-settings":"Reset settings to default",":net-wifi":"WiFi Network",":password":"Password",":advanced":"Advanced Settings",":net-settings":"Network Settings",":dhcp":"Use DHCP",":ip":"IP Address",":gw":"Gateway",":nm":"Netmask",":dns":"DNS Server",":ap-settings":"Access Point Settings",":ap-name":"Access Point Name",":pass-prot":"Password protected",":enable-disc":"Enable device discovery",":python":"Python",":python-desc":"Program Mirobot using the Python language from within your browser",":logic":"Logic",":loops":"Loops",":math":"Math",":lists":"Lists",":variables":"Variables",":functions":"Functions","langName":"English","flag":"gb"},"ar":{"langName":"العربية","flag":"none"},"fa":{"langName":"فارسی","flag":"none"},"hi":{"langName":"हिन्दी","flag":"in"},"hrx":{"langName":"Hunsrik","flag":"br"},"hu":{"langName":"Magyar","flag":"hu"},"is":{"langName":"Íslenska","flag":"is"},"ms":{"langName":"Bahasa Melayu","flag":"none"},"ro":{"langName":"Română","flag":"ro"},"tr":{"langName":"Türkçe","flag":"tr"},"uk":{"langName":"Українська","flag":"ua"},"vi":{":save":"Lưu",":save-as":"Lưu thành",":new-prog":"Chương trình mới",":delete-prog":"Xóa chương trình",":download":"Tải về chương trình hiện tại",":upload":"Tải chương trình lên",":open":"Mở chương trình",":choose-name":"Chọn tên cho tệp",":unsaved":"Thay đổi của bạn sẽ không được lưu lại, bạn muốn tiếp tục không?",":exists":"Lỗi, tệp trùng tên",":single-file":"Hãy chọn một tệp để tải lên",":sure":"Bạn có muốn xóa chương trình?",":permanent":"Việc này sẽ làm mất vĩnh viễn và không khôi phục được",":address":"Nhập địa chỉ cho Mirobot của bạn",":connect":"Kết nối",":connected":"Đã kết nối",":move-cmd":"Dịch chuyển về hướng [[direction]] một khoảng cách [[distance]] mm",":penup-cmd":"Đưa bút lên",":pendown-cmd":"Đưa bút xuống",":turn-cmd":"Rẽ hướng [[direction]] một góc [[angle]] độ",":repeat-cmd":"Lập lại [[count]] lần",":beep-cmd":"Kêu beep [[duration]] giây",":forward":"phía trước",":back":"phía sau",":left":"trái",":right":"phải",":start-collision":"Bắt đầu phát hiện va chạm",":start-following":"Bắt đầu dò theo line",":toolbox":"Hộp công cụ",":program":"Chương trình",":drag":"Kéo hàm từ bên trái vào đây!",":run":"Chạy",":pause":"Tạm dừng",":stop":"Dừng",":clear":"Xóa",":show-help":"Hiển thị trợ giúp",":hide-help":"Ẩn trợ giúp",":js-help-title":"Điều khiển Mirobot với Javascript",":js-help-intro":"Sử dụng các lệnh cơ bản sau để bắt đầu điều khiển Mirobot",":js-forward-help":"di chuyển về phía trước 100 mm",":js-back-help":"di chuyển về phía sau 100 mm",":js-left-help":"rẽ sang trái 90 độ",":js-right-help":"rẽ sang phải 90 độ",":js-penup-help":"nâng bút lên",":js-pendown-help":"hạ bút xuống để vẽ",":js-beep-help":"tạo tiếng beep",":hide-js":"Ẩn Javascript",":show-js":"Hiển thị Javascript",":100mm-grid":"lưới 100 mm",":blockly":"Blockly",":blockly-desc":"Ứng dụng này cho phép sử dụng các kỹ thuật lập trình chuyên sâu để điều khiển Mirobot",":javascript":"Javascript",":javascript-desc":"Lập trình Mirobot với sức mạnh của Javascript ngay trên trình duyệt của bạn",":mirobot-ui":"Giao diện điều khiển Mirobot",":mirobot-ui-desc":"Ứng dụng này có sẵn các ví dụ đơn giản dạng kéo thả để lập trình cho Mirobot",":point-click":"Trỏ và click",":point-click-desc":"Click chuột để điều khiển Mirobot và xem chương trình nó sẽ chạy",":remote":"Điều khiển từ xa",":remote-desc":"Sử dụng các nút để điều khiển trực tiếp Mirobot của bạn",":snap":"Snap!",":snap-desc":"Snap! Là một ngôn ngữ tương tự Scratch và rất tiện lợi trong việc thêm vào các cảm biến cho chương trình ","Move forward by %n mm":"Di chuyển về phía trước %n mm","Move back by %n mm":"Di chuyển về phía sau %n mm","Beep for %n seconds":"Beep trong %n giây","Stop":"Dừng","Bump sensor":"Cảm biến va chạm","Line sensor":"Cảm biến line","When I bump into something":"Khi tôi chạm vào một vật gì đó","When the line sensor changes":"Khi cảm biến line thay đổi",":run-on-mirobot":"Chạy trên Mirobot",":stop-mirobot":"Dừng Mirobot",":simulate-program":"Giả lập chương trình",":reset-simulation":"Khởi chạy lại chương trình",":view-js-code":"Xem code Javascript",":clear-program":"Xóa nội dung chương trình",":chrome":"Ứng dụng Chrome",":chrome-desc":"Ứng dụng Chrome độc lập giúp bạn có thể chạy tất cả các ứng dụng từ trang này mà không cần nối internet",":chrome-intro":"Bạn có thể chạy tất cả các ứng dụng Mirobot chỉ với một ứng dụng Chrome",":chrome-link":"Cài đặt nó từ kho ứng dụng Chrome",":simulate":"Giả lập",":hide-sim":"Ẩn cho đến khi kích hoạt",":fast-sim":"Tăng tốc",":reset-sim":"Khởi chạy lại",":scratch":"Scratch",":scratch-desc":"Sử dụng Scratch chương trình Mirobot của bạn (yêu cầu Flash)",":scratch-intro1":"Chương trình Mirobot sử dụng môi trường lập trình Scratch bạn biết và tình yêu.",":scratch-intro2":"Bạn sẽ cần hỗ trợ Flash trong trình duyệt của bạn cho điều này, nếu bạn không có điều này (ví dụ: bạn đang sử dụng iOS), bạn có thể thử [[chụp]]",":scratch-link":"Bắt đầu sử dụng Scratch!",":mirobot-connected":"Kết nối với Mirobot",":mirobot-error":"Lỗi kết nối với Mirobot",":mirobot-connecting":"Kết nối đến Mirobot",":scanning":"Quét mạng",":no-networks":"Không tìm thấy mạng WiFi",":reset-settings":"Thiết lập lại các thiết lập mặc định",":net-wifi":"Mạng WiFi",":password":"Mật khẩu",":advanced":"Cài đặt nâng cao",":net-settings":"Thiết lạp mạng lưới",":dhcp":"sử dụng DHCP",":ip":"Địa chỉ IP",":gw":"cổng vào",":nm":"netmask",":dns":"DNS server",":ap-settings":"Cài đặt Access Point",":ap-name":"Tên điểm truy cập",":pass-prot":"Mật khẩu được bảo vệ",":enable-disc":"Kích hoạt tính năng phát hiện thiết bị",":python":"Python",":python-desc":"Chương trình Mirobot sử dụng ngôn ngữ Python từ bên trong trình duyệt của bạn",":logic":"logic",":loops":"Loops",":math":"môn Toán",":lists":"Chức năng",":variables":"biến",":functions":"Chức năng","langName":"Tiếng Việt","flag":"vn"},"bn":{"langName":"বাংলা","flag":"bd"},"ca":{":save":"Desa",":save-as":"Desa com a",":new-prog":"Nou programa",":delete-prog":"Esborra el programa",":download":"Descarrega el programa actual",":upload":"Puja un programa",":open":"Obre un programa",":choose-name":"Tria el nom del arxiu",":unsaved":"Tens canvis sense desar que es perdran. Vols continuar?",":exists":"Error, ja existeix un arxiu amb aquest nom",":single-file":"Selecciona un arxiu per pujar, si us plau",":sure":"Estàs segur que desitjes eliminar el programa",":permanent":"Aquesta acció no es podrà desfer",":address":"Introdueix l'adreça del teu Mirobot aquí",":connect":"Connecta't",":connected":"Connectat",":move-cmd":"Mou-te [[distance]] mm cap [[direction]]",":penup-cmd":"Aixeca el llapis",":pendown-cmd":"Baixa el llapis",":turn-cmd":"Gira [[angle]] graus cap a [[direction]]",":repeat-cmd":"Repeteix [[count]] vegades",":beep-cmd":"Fes un so durant [[duration]] segons",":forward":"endavant",":back":"endarrera",":left":"l'esquerra",":right":"la dreta",":start-collision":"Inicia la Detecció de Col·lisions",":start-following":"Inicia el Seguiment de Línies",":toolbox":"Caixa d'eines",":program":"Programa",":drag":"Arrossega les funcions de l'esquerra cap aquí",":run":"Executa",":pause":"Pausa",":stop":"Atura",":clear":"Esborra",":show-help":"Mostra l'ajuda",":hide-help":"Amaga l'ajuda",":js-help-title":"Controlant el Mirobot amb Javascript",":js-help-intro":"Comença a controlar el teu Mirobot amb aquestes senzilles instruccions:",":js-forward-help":"mou-te 100 mm cap endavant",":js-back-help":"mou-te 100 mm cap endarrera",":js-left-help":"gira 90 graus a l'esquerra",":js-right-help":"gira 90 graus a la dreta",":js-penup-help":"aixeca el llapis",":js-pendown-help":"baixa el llapis per dibuixar",":js-beep-help":"fes que soni",":hide-js":"Amaga Javascript",":show-js":"Mostra Javascript",":100mm-grid":"Quadrícula de 100mm",":blockly":"Blockly",":blockly-desc":"Aquesta aplicació permet controlar el teu Mirobot fent servir tècniques de programació avançades",":javascript":"Javascript",":javascript-desc":"Programa Mirobot fent servir tot el potencial de Javascript des del teu navegador",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Aplicació bàsica per programar el teu Mirobot arrossegant instruccions",":point-click":"Apunta i clica",":point-click-desc":"Clica per controlar el teu Mirobot i mira quin programa faria servir",":remote":"Control Remot",":remote-desc":"Fes servir botons per controlar el teu Mirobot",":snap":"Snap!",":snap-desc":"Snap! és molt semblant a Scratch i és perfecte per fer servir sensors en el teu codi","Move forward by %n mm":"Mou-te %n mm endavant","Move back by %n mm":"Mou-te %n mm endarrera","Beep for %n seconds":"Pita durant %n segons","Stop":"Atura't","Bump sensor":"Sensor de xoc","Line sensor":"Sendor de línies","When I bump into something":"Quan xoqui amb alguna cosa","When the line sensor changes":"Quan el sensor de linies canvii",":run-on-mirobot":"Executa al Mirobot",":stop-mirobot":"Atura el Mirobot",":simulate-program":"Simula el Programa",":reset-simulation":"Reinicia la Simulació",":view-js-code":"Mira el codi JS",":clear-program":"Esborra el Programa",":chrome":"Chrome App",":chrome-desc":"Fes una ullada a la versió autònoma d'aplicacions de Chrome que li permet executar totes les aplicacions d'aquest lloc.",":chrome-intro":"Ara pot executar totes les aplicacions Mirobot d'una aplicació de Chrome descarregable",":chrome-link":"Instal·lar-des de Chrome Web Store",":simulate":"simular",":hide-sim":"Amagar-fins que activa",":fast-sim":"Accelerar",":reset-sim":"reajustar",":scratch":"Scratch",":scratch-desc":"Zero, s'utilitza per programar la seva Mirobot (requereix Flash)",":scratch-intro1":"Programa Mirobot utilitzant l'entorn de programació d'Scratch que coneixes i estimes.",":scratch-intro2":"Vostè necessita tenir instal·lat Flash en el seu navegador per això, si vostè no té aquest (per exemple, que està utilitzant IOS), pot intentar [[ressort]]",":scratch-link":"Començar a fer servir Zero!",":mirobot-connected":"Connectat a Mirobot",":mirobot-error":"Ha fallat la connexió amb Mirobot",":mirobot-connecting":"Connexió a Mirobot",":scanning":"buscant xarxes",":no-networks":"No es van trobar xarxes WiFi",":reset-settings":"Restablir la configuració per defecte",":net-wifi":"la xarxa de WiFi",":password":"contrasenya",":advanced":"Configuració avançada",":net-settings":"Configuració de la xarxa",":dhcp":"Utilitza DHCP",":ip":"Adreça IP",":gw":"entrada",":nm":"Màscara de xarxa",":dns":"servidor DNS",":ap-settings":"Configuració del punt d'accés",":ap-name":"Nom de Punt d'Accés",":pass-prot":"protegit per contrasenya",":enable-disc":"Habilitar la detecció de dispositius",":python":"pitó",":python-desc":"Programa Mirobot utilitzant el llenguatge Python des del navegador",":logic":"lògica",":loops":"bucles",":math":"matemàtiques",":lists":"llistes",":variables":"Les variables",":functions":"funcions","langName":"Català","flag":"cat"},"cs":{"langName":"Česky","flag":"cz"},"de":{":save":"Speichern",":save-as":"Speichern unter",":new-prog":"Neues Programm",":delete-prog":"Programm löschen",":download":"Aktuelles Programm herunterladen",":upload":"Programm hoch laden",":open":"Programm öffnen",":choose-name":"Dateiname auswählen",":unsaved":"Ungesicherte Änderungen werden verloren gehen. Fortfahren?",":exists":"Fehler: Eine Datei diese Namens existiert bereits",":single-file":"Bitte nur eine einzelen Datei zum hoch laden auswählen",":sure":"Sind Sie sicher, dass Sie das Programm löschen wollen?",":permanent":"DIes ist permanent und kann nicht rückgängig gemacht werden",":address":"Geben Sie hier die Adresse des Mirobot ein",":connect":"Verbinden",":connected":"Verbunden",":move-cmd":"Fahre [[direction]] um [[distance]] mm",":penup-cmd":"Stift runter",":pendown-cmd":"Stift hoch",":turn-cmd":"Drehe [[direction]] um [[angle]] Grad",":repeat-cmd":"Wiederhole [[count]] mal",":beep-cmd":"Signal für [[duration]] Sekunden",":forward":"vorwärts",":back":"rückwärts",":left":"links",":right":"rechts",":start-collision":"Starte Kollisionsentdeckung",":start-following":"Starte Lininenverfolgung",":toolbox":"Werkzeuge",":program":"Programm",":drag":"Ziehe die Funktion von der linken Seite herüber",":run":"Ausführen",":pause":"Pause",":stop":"Halt",":clear":"Löschen",":show-help":"Hilfe anzeigen",":hide-help":"Hilfe verbergen",":js-help-title":"Mirobot mit Javascript steuern",":js-help-intro":"Verwenden Sie diese einfachen Befehle um mit dem Mirobot zu beginnen:",":js-forward-help":"100 mm vorwärts fahren",":js-back-help":"100 mm rückwärts fahren",":js-left-help":"um 90 GRad nach Links drehen",":js-right-help":"um 90 Grad nach Rechts drehen",":js-penup-help":"Stift anheben",":js-pendown-help":"Stift absetzen",":js-beep-help":"Signal geben",":hide-js":"Javascript verbergen",":show-js":"Javascript anzeigen",":100mm-grid":"Raster mit 100 mm",":blockly":"Blockly",":blockly-desc":"Diese App bietet erweiterte Programmiertechniken für den Mirobot",":javascript":"Javascript",":javascript-desc":"Programmier den Mirobot mit allen Möglichkeiten von Javascript im Browser",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Dies ist die einfache Drag-and-Drop App zur Programmierung des Mirobot",":point-click":"Zeigen & Anklicken",":point-click-desc":"Hier klicken um den Mirobot zu steuern und das Kontrollprogramm anzuzeigen",":remote":"Fernsteuerung",":remote-desc":"Mit dieser Schaltfläche den Mirobot fernsteuern",":snap":"Snap!",":snap-desc":"Snap! ist ähnlich zu Scratch und eignet sich gut, zusätzliche Sensoren einzubinden","Move forward by %n mm":"vor fahren um %n mm","Move back by %n mm":"zurück fahren um %n mm","Beep for %n seconds":"Signal für %n Sekunden","Stop":"Halt","Bump sensor":"Stoßsensor","Line sensor":"Liniensensor","When I bump into something":"Sollte ich an etwas stoßen","When the line sensor changes":"Wennder Liniensensor sich ändert",":run-on-mirobot":"Auf Mirobot ausführen",":stop-mirobot":"Mirobot anhalten",":simulate-program":"Programm simulieren",":reset-simulation":"Simulation zurück setzen",":view-js-code":"JS Code anzeigen",":clear-program":"Programm löschen",":chrome":"Chrome App",":chrome-desc":"Überprüfen Sie die Standalone-Chrome-App aus, die können Sie alle Anwendungen von dieser Seite laufen.",":chrome-intro":"Sie können nun alle von der Mirobot Apps von downloadbare Chrome App laufen",":chrome-link":"Installieren Sie es aus dem Chrome Web Store",":simulate":"Simulieren",":hide-sim":"Ausblenden, bis aktiv",":fast-sim":"Beschleunigen",":reset-sim":"zurückstellen",":scratch":"Scratch",":scratch-desc":"Verwenden Sie Scratch Ihre Mirobot zu programmieren (benötigt Flash)",":scratch-intro1":"Programm Mirobot die Scratch-Programmierumgebung verwenden Sie kennen und lieben.",":scratch-intro2":"Sie werden Flash-Unterstützung benötigen für diese in Ihrem Browser, wenn Sie dies nicht haben (zum Beispiel Sie verwenden iOS) können Sie versuchen, [[Snap]]",":scratch-link":"Starten Mit Scratch!",":mirobot-connected":"Verbunden mit Mirobot",":mirobot-error":"Fehler beim Verbinden mit Mirobot",":mirobot-connecting":"Anschluss an Mirobot",":scanning":"Scannen für Netzwerke",":no-networks":"Keine WiFi-Netzwerke gefunden",":reset-settings":"Auf Standardeinstellungen zurücksetzen",":net-wifi":"WiFi Netz",":password":"Passwort",":advanced":"Erweiterte Einstellungen",":net-settings":"Netzwerkeinstellungen",":dhcp":"DHCP verwenden",":ip":"IP Adresse",":gw":"Tor",":nm":"Netmask",":dns":"DNS-Server",":ap-settings":"Access Point-Einstellungen",":ap-name":"Access Point Name",":pass-prot":"Passwortgeschützt",":enable-disc":"Aktivieren Sie die Geräteerkennung",":python":"Python",":python-desc":"Programm Mirobot mit der Python-Sprache aus Ihrem Browser",":logic":"Logik",":loops":"Loops",":math":"Mathe",":lists":"Listen",":variables":"Variablen",":functions":"Funktionen","langName":"Deutsch","flag":"de"},"da":{"langName":"Dansk","flag":"dk"},"el":{"langName":"Ελληνικά","flag":"gr"},"es":{":save":"Guardar",":save-as":"Guardar como",":new-prog":"Nuevo programa",":delete-prog":"Borrar programa",":download":"Descargar programa actual",":upload":"Subir programa",":open":"Abrir programa",":choose-name":"Escoge el nombre del fichero",":unsaved":"Has hecho cambios que se perderán. ¿Deseas continuar?",":exists":"Error, ya existe un fichero con ese nombre",":single-file":"Po favor, escoger un único fichero a subir",":sure":"¿Estás seguro que deseas borrar el programa?",":permanent":"Esta acción es permanente y no se pude deshacer",":address":"Introduce la dirección de tu Mirobot aquí",":connect":"Conectar",":connected":"Conectado",":move-cmd":"Mover [[distance]] mm hacia [[direction]]",":penup-cmd":"Levantar el lápiz",":pendown-cmd":"Bajar el lápiz",":turn-cmd":"Girar [[angle]] grados hacia la [[direction]]",":repeat-cmd":"Repetir [[count]] veces",":beep-cmd":"Pitar durante [[duration]] segundos",":forward":"adelante",":back":"atrás",":left":"izquierda",":right":"derecha",":start-collision":"Iniciar la Detección de Colisiones",":start-following":"Iniciar el Seguimiento de Líneas",":toolbox":"Caja de herramientas",":program":"Programa",":drag":"Arrastra funciones de la izquierda hacía aquí",":run":"Ejecutar",":pause":"Pausar",":stop":"Parar",":clear":"Limpiar",":show-help":"Mostrar ayuda",":hide-help":"Ocultar ayuda",":js-help-title":"Controlando Mirobot con Javascript",":js-help-intro":"Utiliza estas sencillas instruccions para empezar a controlar Mirobot:",":js-forward-help":"mover 100mm hacia adelante",":js-back-help":"mover 100mm hacia atrás",":js-left-help":"girar 90 grados hacia la izquierda",":js-right-help":"girar 90 grados hacia la derecha",":js-penup-help":"levantar el lápiz",":js-pendown-help":"bajar el lápiz para dibujar",":js-beep-help":"haz que pite",":hide-js":"Ocultar Javascript",":show-js":"Mostrar Javascript",":100mm-grid":"Cuadrícula de 100mm",":blockly":"Blockly",":blockly-desc":"Esta applicación permite controlar Mirobot usando técnicas de programación más avanzadas",":javascript":"Javascript",":javascript-desc":"Programa Mirobot usando todo el potencial de Javascript directamente desde tu navegador",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Aplicación básica para programar Mirobot arrastrando instrucciones",":point-click":"Apunta y pulsa",":point-click-desc":"Pulsa para controlar Mirobot y ver que código utilizaría",":remote":"Control Remoto",":remote-desc":"Usa un mando para controlar directamente los movimientos de tu Mirobot",":snap":"Snap!",":snap-desc":"Snap! es muy parecido a Scratch y permite usar los datos de los sensores en el código","Move forward by %n mm":"Mover %n mm hacia adelante","Move back by %n mm":"Mover %n mm hacia atrás","Beep for %n seconds":"Pitar durante %n segundos","Stop":"Parar","Bump sensor":"Sensor de choque","Line sensor":"Sensor de líneas","When I bump into something":"Cuando choco con algo","When the line sensor changes":"Cuando cambia el sensor de líneas",":run-on-mirobot":"Ejecutar en Mirobot",":stop-mirobot":"Parar Mirobot",":simulate-program":"Simular programa",":reset-simulation":"Reiniciar la simulación",":view-js-code":"Ver código JS",":clear-program":"Borrar programa",":chrome":"Chrome App",":chrome-desc":"Echa un vistazo a la versión autónoma de aplicaciones de Chrome que le permite ejecutar todas las aplicaciones de este sitio.",":chrome-intro":"Ahora puede ejecutar todas las aplicaciones Mirobot de una aplicación de Chrome descargable",":chrome-link":"Instalarlo desde Chrome Web Store",":simulate":"Simular",":hide-sim":"Esconderse hasta que activa",":fast-sim":"Acelerar",":reset-sim":"Reiniciar",":scratch":"Scratch",":scratch-desc":"Cero, se utiliza para programar su Mirobot (requiere Flash)",":scratch-intro1":"Programa Mirobot utilizando el entorno de programación de Scratch que conoces y amas.",":scratch-intro2":"Usted necesita tener instalado Flash en su navegador para esto, si usted no tiene este (por ejemplo, que está utilizando IOS), puede intentar [[resorte]]",":scratch-link":"Empezar a usar Cero!",":mirobot-connected":"Conectado a Mirobot",":mirobot-error":"Error al conectar con Mirobot",":mirobot-connecting":"Conexión a Mirobot",":scanning":"Buscando redes",":no-networks":"No se encontraron redes WiFi",":reset-settings":"Restablecer la configuración por defecto",":net-wifi":"la red de WiFi",":password":"Contraseña",":advanced":"Ajustes avanzados",":net-settings":"Configuración de la red",":dhcp":"Usar DHCP",":ip":"Dirección IP",":gw":"Puerta",":nm":"Máscara de red",":dns":"Servidor DNS",":ap-settings":"Configuración del punto de acceso",":ap-name":"Nombre del punto de acceso",":pass-prot":"Contraseña protegida",":enable-disc":"Habilitar la detección de dispositivos",":python":"Pitón",":python-desc":"Programa Mirobot utilizando el lenguaje Python desde el navegador",":logic":"Lógica",":loops":"bucles",":math":"Mates",":lists":"Liza",":variables":"Variables",":functions":"funciones","langName":"Español","flag":"es"},"fi":{"langName":"Suomi","flag":"fi"},"fr":{":save":"Sauvegarder ",":save-as":"Sauvegarder sous",":new-prog":"Nouveau programme",":delete-prog":"Supprimer programme",":download":"Télécharger programme en cours",":upload":"Uploader programme",":open":"Ouvrir programme",":choose-name":"Choisir le nom de fichier",":unsaved":"Vous avez des modifications non sauvegardées qui seront perdues. Voulez-vous continuer ?",":exists":"Erreur, ce nom de fichier existe déjà",":single-file":"Merci de sélectionner un seul fichier à uploader",":sure":"Êtes-vous certain de vouloir supprimer ce programme ?",":permanent":"Ceci est permanent et ne peut être annulé",":address":"Entrez l'adresse pour votre Mirobot ici",":connect":"Connecter",":connected":"Connecté",":move-cmd":"Déplacer [[direction]] de [[distance]] mm",":penup-cmd":"Lever le crayon",":pendown-cmd":"Baisser le crayon",":turn-cmd":"Tourner [[direction]] de [[angle]] degrés",":repeat-cmd":"Répéter [[count]] fois",":beep-cmd":"Biper pendant [[duration]] secondes",":forward":"avant",":back":"arrière",":left":"gauche",":right":"droite",":start-collision":"Démarrer la détection de collision",":start-following":"Démarrer le suivi de lignes",":toolbox":"Boîte à outils",":program":"Programme",":drag":"Faire glisser les fonctions à gauche vers ici!",":run":"Lancer",":pause":"Pause",":stop":"Arrêter",":clear":"Effacer",":show-help":"Afficher l'aide",":hide-help":"Masquer l'aide",":js-help-title":"Contrôler Mirobot avec Javascript",":js-help-intro":"Utilisez ces commandes de base pour commencer à contrôler Mirobot",":js-forward-help":"déplacer de 100 mm en avant",":js-back-help":"déplacer de 100 mm en arrière",":js-left-help":"tourner de 90 degrés à gauche",":js-right-help":"tourner de 90 degrés à droite",":js-penup-help":"lever le crayon ",":js-pendown-help":"baisser le crayon pour dessiner",":js-beep-help":"faire biper",":hide-js":"Masquer Javascript",":show-js":"Afficher Javascript",":100mm-grid":"Grille de 100mm",":blockly":"Blockly",":blockly-desc":"Cette application permet d'utiliser des techniques de programmation plus avancées pour le contrôle de Mirobot",":javascript":"Javascript",":javascript-desc":"Programme Mirobot utilisant toute la puissance de Javascript directement depuis votre navigateur",":mirobot-ui":"Mirobot IU (Interface Utilisateur)",":mirobot-ui-desc":"Ceci est une application intégrée pour programmer Mirobot à l'aide de la simple fonctionalité glisser-déposer ",":point-click":"Pointer et Cliquer",":point-click-desc":"Cliquer pour contrôler Mirobot et visualiser le programme utilisé",":remote":"Contrôle à distance",":remote-desc":"Utiliser les boutons pour contrôler directement Mirobot",":snap":"Snap!",":snap-desc":"Snap! est très similaire à Scratch et est utile pour se servir des modules de détection dans le code","Move forward by %n mm":"Déplacer vers l'avant de %n mm","Move back by %n mm":"Déplacer vers l'arrière de %n mm","Beep for %n seconds":"Biper pendant %n secondes","Stop":"Arrêter","Bump sensor":"Détecteur de choc","Line sensor":"Détecteur de ligne","When I bump into something":"Lorsque je heurte quelque chose","When the line sensor changes":"Lorsque le détecteur de ligne change",":run-on-mirobot":"Lancer Mirobot",":stop-mirobot":"Arrêter Mirobot",":simulate-program":"Simuler Programme",":reset-simulation":"Réinitialiser la simulation",":view-js-code":"Afficher Code JS",":clear-program":"Effacer Programme",":chrome":"Chrome App",":chrome-desc":"Vérifiez la version autonome App Chrome qui vous permet d'exécuter toutes les applications de ce site.",":chrome-intro":"Vous pouvez maintenant exécuter toutes les applications Mirobot d'une application Chrome téléchargeable",":chrome-link":"Installez-le à partir du Chrome Web Store",":simulate":"Simuler",":hide-sim":"Hide jusqu'à actif",":fast-sim":"Accélérer",":reset-sim":"Réinitialiser",":scratch":"Scratch",":scratch-desc":"Utilisez Scratch pour programmer votre Mirobot (nécessite Flash)",":scratch-intro1":"Mirobot programme en utilisant l'environnement de programmation Scratch vous connaissez et aimez.",":scratch-intro2":"Vous aurez besoin d'un soutien Flash dans votre navigateur pour cela, si vous ne l'avez pas (par exemple que vous utilisez iOS), vous pouvez essayer [[pression]]",":scratch-link":"Commencer à utiliser Scratch!",":mirobot-connected":"Connecté à Mirobot",":mirobot-error":"Erreur de connexion au Mirobot",":mirobot-connecting":"Connexion à Mirobot",":scanning":"Numérisation des réseaux",":no-networks":"Aucun réseau WiFi trouvé",":reset-settings":"Rétablir les paramètres par défaut",":net-wifi":"WiFi Réseau",":password":"Mot de passe",":advanced":"Réglages avancés",":net-settings":"Paramètres réseau",":dhcp":"Utiliser DHCP",":ip":"Adresse IP",":gw":"passerelle",":nm":"netmask",":dns":"serveur DNS",":ap-settings":"Paramètres de point d'accès",":ap-name":"Nom du point d'accès",":pass-prot":"Protégé par mot de passe",":enable-disc":"Activer la détection des périphériques",":python":"Python",":python-desc":"Programme Mirobot en utilisant le langage Python à partir de votre navigateur",":logic":"Logique",":loops":"Boucles",":math":"Les maths",":lists":"Listes",":variables":"Variables",":functions":"Les fonctions","langName":"Français","flag":"fr"},"it":{"langName":"Italiano","flag":"it"},"ja-hira":{"langName":"にほんご","flag":"jp"},"ja":{"langName":"日本語","flag":"jp"},"kn":{"langName":"ಕನ್ನಡ","flag":"in"},"ko":{"langName":"한국어","flag":"kr"},"nl":{":save":"Opslaan",":save-as":"Opslaan als",":new-prog":"Nieuw programma",":delete-prog":"Verwijder programma",":download":"huidige programma downloaden",":upload":"programma uploaden",":open":"programma openen",":choose-name":"Kies de bestandsnaam",":unsaved":"Je hebt onopgeslagen wijzigingen die verloren zullen gaan. Wil je door gaan?",":exists":"Error: Bestand bestaat al met deze naam",":single-file":"Selecteer een enkel bestand op te uploaden",":sure":"Weet je zeker dat je het programma wilt verwijderen?",":permanent":"Dit is definitief en kan niet ongedaan gemaakt worden",":address":"Vul het adres voor je Mirobot hier in",":connect":"Verbinden",":connected":"Verbonden",":move-cmd":"Beweeg [[distance]] mm naar [[direction]]",":penup-cmd":"Pen omhoog",":pendown-cmd":"Pen omlaag",":turn-cmd":"Draai [[angle]] graden naar [[direction]]",":repeat-cmd":"Herhaal [[count]] keer",":beep-cmd":"Beep gedurende [[duration]] seconden",":forward":"voren",":back":"achteren",":left":"links",":right":"rechts",":start-collision":"Start bots-detectie",":start-following":"Start lijn-volgen",":toolbox":"Toolbox",":program":"Programma",":drag":"Sleep functies van links naar hier!",":run":"Uitvoeren",":pause":"Pauze",":stop":"Stop",":clear":"Leeg",":show-help":"Toon help",":hide-help":"Hide help",":js-help-title":"Mirobot met Javascript besturen",":js-help-intro":"Gebruik deze eenvoudige commando's om te beginnen met het besturen van Mirobot:",":js-forward-help":"beweeg 100 mm naar voren",":js-back-help":"beweeg 100 mm naar achteren",":js-left-help":"draai 90 graden naar links",":js-right-help":"draai 90 graden naar rechts",":js-penup-help":"til de pen op",":js-pendown-help":"breng de pen omlaag om te tekenen",":js-beep-help":"maak een geluid",":hide-js":"Verberg Javascript",":show-js":"Toon Javascript",":100mm-grid":"100mm raster",":blockly":"blokkerig",":blockly-desc":"Deze app staat het toe geavanceerdere programmeer technieken te gebruiken om de Mirobot te besturen",":javascript":"Javascript",":javascript-desc":"Programmeer Mirobot nu rechtstreeks vanuit je browser met alle mogelijkheden van Javascript",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Dit is de ingebouwde eenvoudige sleep-en-plaats app om te Mirobot te programmeren",":point-click":"Aanwijzgen & Klikken",":point-click-desc":"Klik om Mirobot te besturen en te zien welk programma het gebruikt",":remote":"Afstandsbediening",":remote-desc":"Gebruik de knoppen om je Mirobot direct op afstand te besturen",":snap":"Snap!",":snap-desc":"Snap! lijkt veel op Scratch en is goed om de extra sensors toe te voegen in de code","Move forward by %n mm":"Beweeg %n mm naar voren","Move back by %n mm":"Beweeg %n mm naar achteren","Beep for %n seconds":"Beep gedurende %n seconden","Stop":"Stop","Bump sensor":"Bots sensor","Line sensor":"Lijn sensor","When I bump into something":"Als ik ergens tegenaan kom","When the line sensor changes":"Als de lijn sensor verandert",":run-on-mirobot":"Uitvoeren op Mirobot",":stop-mirobot":"Stop Mirobot",":simulate-program":"Simuleer Programma",":reset-simulation":"Reset Simulatie",":view-js-code":"Bekijk JS Code",":clear-program":"Verwijder programma",":chrome":"Chrome App",":chrome-desc":"Check out de stand-alone Chrome-app waarmee je alle apps draaien op deze site.",":chrome-intro":"U kunt nu al het Mirobot Apps van één downloadbaar Chrome App",":chrome-link":"Installeer het vanuit de Chrome Web Store",":simulate":"Simuleren",":hide-sim":"Verbergen tot actief",":fast-sim":"Versnellen",":reset-sim":"Reset",":scratch":"Scratch",":scratch-desc":"Gebruik Scratch uw Mirobot programmeren (vereist Flash)",":scratch-intro1":"Programma Mirobot met behulp van de Scratch programmeeromgeving die je kent en liefde.",":scratch-intro2":"U zult Flash ondersteuning nodig in uw browser voor dit, als je niet over deze (bijv. Je gebruikt iOS) kunt u proberen [[snap]]",":scratch-link":"Start met Scratch!",":mirobot-connected":"Verbonden met Mirobot",":mirobot-error":"Fout bij verbinding maken Mirobot",":mirobot-connecting":"Aansluiten op Mirobot",":scanning":"Scannen op netwerken",":no-networks":"Geen WiFi-netwerken gevonden",":reset-settings":"Reset instellingen op standaard",":net-wifi":"WiFi-netwerk",":password":"Wachtwoord",":advanced":"Geavanceerde instellingen",":net-settings":"Netwerkinstellingen",":dhcp":"gebruik DHCP",":ip":"IP adres",":gw":"poort",":nm":"netmask",":dns":"DNS-server",":ap-settings":"Instellingen Access Point",":ap-name":"Toegangspuntnaam",":pass-prot":"beveiligd met een wachtwoord",":enable-disc":"Inschakelen apparaat discovery",":python":"Python",":python-desc":"Programma Mirobot met behulp van de Python taal vanuit uw browser",":logic":"Logica",":loops":"Loops",":math":"Wiskunde",":lists":"lijsten",":variables":"Variabelen",":functions":"functies","langName":"Nederlands","flag":"nl"},"no":{":save":"Lagre",":save-as":"Lagre som",":new-prog":"Nytt program",":delete-prog":"Slett program",":download":"Last ned nåværende program",":upload":"Last opp program",":open":"Åpne program",":choose-name":"Velg filnavn",":unsaved":"Du har ulagrede endringer som vil gå tapt. Ønsker du å fortsette?",":exists":"Feil, en fil med samme navn eksisterer allerede",":single-file":"Vennligst velg en enkelt fil for opplasting",":sure":"Er du sikker på at du ønsker å slette programmet",":permanent":"Endringen er permanent og kan ikke tilbakestilles",":address":"Skriv inn adressen til din Mirobot her",":connect":"Koble til",":connected":"Koblet til",":move-cmd":"Flytt [[distance]] mm [[direction]]",":penup-cmd":"Penn opp",":pendown-cmd":"Penn ned",":turn-cmd":"Snu [[angle]] grader [[direction]]",":repeat-cmd":"Gjenta [[count]] ganger",":beep-cmd":"Pip i [[duration]] sekunder",":forward":"fremover",":back":"bakover",":left":"mot venstre",":right":"mot høyre",":start-collision":"Start Kollisjons-deteksjon",":start-following":"Start Linje-følging",":toolbox":"Verktøykasse",":program":"Program",":drag":"Trekk funksjoner fra venstre side hit!",":run":"Kjør",":pause":"Pause",":stop":"Stopp",":clear":"Slett",":show-help":"Vis hjelp",":hide-help":"Skjul hjelp",":js-help-title":"Styr Mirobot med Javascript",":js-help-intro":"Bruk disse enkle kommandoene for å styre Mirobot:",":js-forward-help":"flytt 100 mm fremover",":js-back-help":"flytt 100 mm bakover",":js-left-help":"Snu 90 grader mot venstre",":js-right-help":"Snu 90 grader mot høyre",":js-penup-help":"løft pennen opp",":js-pendown-help":"senk pennen for å tegne",":js-beep-help":"få den til å pipe",":hide-js":"Gjem Javascript",":show-js":"Vis Javascript",":100mm-grid":"100 mm rutemønster",":blockly":"Blockly",":blockly-desc":"Denne appen tillater mer avanserte programmeringsteknikker for å styre Mirobot",":javascript":"Javascript",":javascript-desc":"Programmér Mirobot med full kapasitet fra Javascript direkte i nettleseren",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Dette er den innebygde enkle dra-og-slipp appen for å programmere Mirobot",":point-click":"Pek og Klikk",":point-click-desc":"Klikk for å styre Mirobot og se hvilket program den vil bruke",":remote":"Fjernkontroll",":remote-desc":"Bruk knapper for å fjernstyre Mirobot",":snap":"Snap!",":snap-desc":"Snap! er veldig likt Scratch, og fungerer bra til å benytte sensorene i koden","Move forward by %n mm":"Flytt %n mm fremover","Move back by %n mm":"Flytt %n mm bakover","Beep for %n seconds":"Pip i %n sekunder","Stop":"Stopp","Bump sensor":"Støtsensor","Line sensor":"Linjesensor","When I bump into something":"Når jeg støter borti noe","When the line sensor changes":"Når linjesensoren endres",":run-on-mirobot":"Kjør på Mirobot",":stop-mirobot":"Stopp Mirobot",":simulate-program":"Simulér Program",":reset-simulation":"Nullstill Simulering",":view-js-code":"Vis JS-kode",":clear-program":"Slett Program",":chrome":"Chrome App",":chrome-desc":"Sjekk ut den frittstående Chrome App som lar deg kjøre alle programmer fra dette nettstedet.",":chrome-intro":"Nå kan du kjøre alt av Mirobot Apps fra en nedlastbar Chrome App",":chrome-link":"Installere den fra Chrome Nettmarked",":simulate":"simulere",":hide-sim":"Hide til aktiv",":fast-sim":"Fort deg",":reset-sim":"Tilbakestill",":scratch":"Scratch",":scratch-desc":"Bruk Scratch å programmere Mirobot (krever Flash)",":scratch-intro1":"Program Mirobot bruker Scratch programmeringsmiljø du kjenner og elsker.",":scratch-intro2":"Du trenger Flash-støtte i nettleseren din for dette, hvis du ikke har dette (f.eks du bruker iOS) kan du prøve [[snap]]",":scratch-link":"Begynn å bruke Scratch!",":mirobot-connected":"Koblet til Mirobot",":mirobot-error":"Feil ved tilkobling til Mirobot",":mirobot-connecting":"Koble til Mirobot",":scanning":"Skanner etter nettverk",":no-networks":"Ingen WiFi-nettverk funnet",":reset-settings":"Tilbakestill innstillinger til standard",":net-wifi":"WiFi-nettverk",":password":"Passord",":advanced":"Avanserte innstillinger",":net-settings":"Nettverksinnstillinger",":dhcp":"bruk DHCP",":ip":"IP adresse",":gw":"Inngangsport",":nm":"Nettmaske",":dns":"DNS-server",":ap-settings":"Tilgangspunktinnstillinger",":ap-name":"Access Point Name",":pass-prot":"passord~~POS=TRUNC beskyttet~~POS=HEADCOMP",":enable-disc":"Aktiver enhetsregistrering",":python":"Python",":python-desc":"Program Mirobot hjelp av Python språket fra nettleseren din",":logic":"Logikk",":loops":"Loops",":math":"Matte",":lists":"lister",":variables":"variabler",":functions":"funksjoner","langName":"Norsk","flag":"no"},"pl":{":save":"Zapisz",":save-as":"Zapisz jako",":new-prog":"Nowy program",":delete-prog":"Usuń program",":download":"Pobierz bieżący program",":upload":"Wczytaj program",":open":"Otwórz program",":choose-name":"Wpisz nazwę pliku",":unsaved":"Masz niezapisane zmiany, które zostaną utracone. Czy na pewno chcesz kontynuować?",":exists":"Błąd, plik o takiej nazwie już istnieje",":single-file":"Wybierz plik do wczytania",":sure":"Czy na pewno chcesz usunąć program?",":permanent":"Zmiany są trwałe i nie można ich cofnąć",":address":"Wpisz adres IP swojego robota Mirobot",":connect":"Łączenie",":connected":"Połączono",":move-cmd":"Przesuń [[direction]] o [[distance]] mm",":penup-cmd":"Podnieś pisak",":pendown-cmd":"Opuść pisak",":turn-cmd":"Obróć [[direction]] o [[angle]] stopni",":repeat-cmd":"Powtórz [[ile]] raz(-y)",":beep-cmd":"Zagraj przez [[duration]] sekundę",":forward":"do przodu",":back":"do tyłu",":left":"w lewo",":right":"w prawo",":start-collision":"Rozpocznij wykrywanie przeszkód",":start-following":"Rozpocznij wykrywanie linii",":toolbox":"Przybornik",":program":"Program",":drag":"Przeciągnij funkcje z lewej strony w to miejsce",":run":"Uruchom",":pause":"Pauza",":stop":"Zatrzymaj",":clear":"Wyczyść",":show-help":"Pokaż pomoc",":hide-help":"Ukryj pomoc",":js-help-title":"Kontroluj robota Mirobot z użyciem języka Javascript",":js-help-intro":"Użyj prostych poleceń, by kontrolować robota Mirobot",":js-forward-help":"przesuń 100 mm do przodu",":js-back-help":"przesuń 100 mm do tyłu",":js-left-help":"obroć o 90 stopni w lewo",":js-right-help":"obroć o 90 stopni w prawo",":js-penup-help":"podnieś pisak",":js-pendown-help":"opuść pisak, by rysować",":js-beep-help":"spraw, by robot wydał dźwięk",":hide-js":"Ukryj kod Javascript",":show-js":"Pokaż kod Javascript",":100mm-grid":"Siatka 100 mm",":blockly":"Bloczki",":blockly-desc":"Ta aplikacja umożliwia bardziej zaawansowane techniki programowania do sterowania robotem Mirobot",":javascript":"Javascript",":javascript-desc":"Programuj robota Mirobot używając pełnej mocy JavaScript bezpośrednio w przeglądarce",":mirobot-ui":"Mirobot UI",":mirobot-ui-desc":"Jest to domyślna aplikacja do programowania robota Mirobot metodą przeciągnij i upuść",":point-click":"Od punktu do punktu",":point-click-desc":"KIlkaj, by kontrolować ruch robota i obserwuj rezultat na ekranie",":remote":"Zdalne sterowanie",":remote-desc":"Użyj przycisków, by sterować robotem Mirobot",":snap":"Snap!",":snap-desc":"Snap1 jest bardzo podobny do Scratcha i jest dobry do wykorzystania czujników w kodzie","Move forward by %n mm":"Przesuń do przodu o %n mm","Move back by %n mm":"Przesuń do tyłu o %n mm","Beep for %n seconds":"Zagraj przez %n sekund(-ę)","Stop":"Zatrzymaj","Bump sensor":"Czujnik przeszkód","Line sensor":"Czujnik linii","When I bump into something":"Kiedy z czymś się zderzy","When the line sensor changes":"Kiedy zmienia się stan czujnika linii",":run-on-mirobot":"Uruchom robota",":stop-mirobot":"Zatrzymaj robota",":simulate-program":"Symuluj program",":reset-simulation":"Resetuj symulację",":view-js-code":"Pokaż kod JS",":clear-program":"Wyczyśc program",":chrome":"Chrome App",":chrome-desc":"Sprawdź autonomiczny Chrome App która pozwala uruchomić wszystkie aplikacje z tej strony.",":chrome-intro":"Teraz można uruchomić wszystkie aplikacje z jednego Mirobot pobrania Chrome App",":chrome-link":"Zainstalować z Chrome Web Store",":simulate":"Symulować",":hide-sim":"Ukryj dopóki aktywna",":fast-sim":"Przyśpieszyć",":reset-sim":"Nastawić",":scratch":"Scratch",":scratch-desc":"Użyj Scratch programowanie Mirobot (wymaga Flash)",":scratch-intro1":"Program Mirobot korzystanie ze środowiska programowania Scratch znasz i miłości.",":scratch-intro2":"Będziesz potrzebował wsparcia Flash w przeglądarce za to, jeśli nie masz tego (np używasz iOS) można spróbować [[Snap]]",":scratch-link":"Zacznij Korzystanie Scratch!",":mirobot-connected":"Połączony Mirobot",":mirobot-error":"Błąd podczas łączenia z Mirobot",":mirobot-connecting":"Podłączanie do Mirobot",":scanning":"Skanowanie w sieci",":no-networks":"Nie znaleziono sieci WiFi",":reset-settings":"Resetowanie ustawień domyślnych",":net-wifi":"Sieć Wi-Fi",":password":"Hasło",":advanced":"Zaawansowane ustawienia",":net-settings":"Ustawienia sieci",":dhcp":"Use DHCP",":ip":"Adres IP",":gw":"Przejście",":nm":"Maska sieci",":dns":"Serwer DNS",":ap-settings":"Ustawienia Access Point",":ap-name":"Nazwa punktu dostępu",":pass-prot":"Hasło chronione",":enable-disc":"Włącz wykrywanie urządzeń",":python":"Pyton",":python-desc":"Program Mirobot użyciu języka Python z poziomu przeglądarki",":logic":"Logika",":loops":"pętle",":math":"Matematyka",":lists":"wykazy",":variables":"zmienne",":functions":"Funkcje","langName":"Polski","flag":"pl"},"pt-br":{"langName":"Português do Brasil","flag":"br"},"pt":{":save":"Gravar",":save-as":"Gravar como",":new-prog":"Novo programa",":delete-prog":"Apagar programa",":download":"Descarregar programa",":upload":"Carregar programa",":open":"Abrir programa",":choose-name":"Escolha o nome do arquivo",":unsaved":"Você tem alterações que serão perdidas. Você quer continuar?",":exists":"Erro, um arquivo com este nome já existe",":single-file":"Escolha um arquivo para carregar",":sure":"Tem certeza de que quer excluir o programa",":permanent":"Isto é permanente e não pode ser revertido",":address":"Entre o endereço do seu Mirobot aqui",":connect":"Conectar",":connected":"Conectado",":move-cmd":"Mover [[direction]] por [[distance]] mm",":penup-cmd":"Caneta para cima",":pendown-cmd":"Caneta para baixo",":turn-cmd":"Gire [[direction]] por [[angle]] graus",":repeat-cmd":"Repita [[count]] vezes",":beep-cmd":"Beep por [[duration]] segundos",":forward":"frente",":back":"trás",":left":"esquerda",":right":"direita",":start-collision":"Começe a Detecção de Colisão",":start-following":"Começe a Seguir Linha",":toolbox":"Caixa de ferramentas",":program":"Programa",":drag":"Arraste as funções da esquerda para cá",":run":"Execute",":pause":"Pausa",":stop":"Pare",":clear":"Apague",":show-help":"Mostre a ajuda",":hide-help":"Esconda a ajuda",":js-help-title":"Controlando o Mirobot com Javascript",":js-help-intro":"Use estes comandos simples para começar a controlar o Mirobot:",":js-forward-help":"mova 100 mm para frente",":js-back-help":"move 100 mm para trás",":js-left-help":"gire 90 graus para a esquerda",":js-right-help":"gire 90 graus para a direita",":js-penup-help":"levante a caneta",":js-pendown-help":"baixe a caneta para desenhar",":js-beep-help":"faça um beep",":hide-js":"Esconda o Javascript",":show-js":"Mostre o Javascript",":100mm-grid":"grade de 100mm",":blockly":"Blockly",":blockly-desc":"Este aplicativo permite técnicas avançadas de programação para o Mirobot",":javascript":"Javascript",":javascript-desc":"Programe o Mirobot usando o poder total do Javascript diretamente do seu navegador",":mirobot-ui":"Interface Gráfica do Mirobot",":mirobot-ui-desc":"Esta é uma simples aplicação arraste-e-solte usada para programar o Mirobot",":point-click":"Aponte & Clique",":point-click-desc":"Clique para controlar o Mirobot e ver o programa que ele irá usar",":remote":"Controle Remoto",":remote-desc":"Use os botões para controlar remotamente o seu Mirobot",":snap":"Snap!",":snap-desc":"Snap! is muito parecido com o Scratch e é bom para usar sensores no programa","Move forward by %n mm":"Mova para frente por %n mm","Move back by %n mm":"Mova para trás por %n mm","Beep for %n seconds":"Beep por %n segundos","Stop":"Pare","Bump sensor":"Sensor de choque","Line sensor":"Sensor de linha","When I bump into something":"Quando eu bater em algo","When the line sensor changes":"Quando o sensor de linha mudar",":run-on-mirobot":"Executar no Mirobot",":stop-mirobot":"Pare o Mirobot",":simulate-program":"Simule o programa",":reset-simulation":"Reinicie a Simulação",":view-js-code":"Veja o código JS",":clear-program":"Apague o programa",":chrome":"Chrome App",":chrome-desc":"Confira o autônomo Chrome App, que permite executar todos os aplicativos a partir deste site.",":chrome-intro":"Agora você pode executar todos os aplicativos Mirobot de um download Chrome App",":chrome-link":"Instale-o a partir da Web Store do Chrome",":simulate":"Simular",":hide-sim":"Esconder até ativa",":fast-sim":"Acelerar",":reset-sim":"Reiniciar",":scratch":"Scratch",":scratch-desc":"Use zero para programar o seu Mirobot (requer Flash)",":scratch-intro1":"Programa Mirobot usando o ambiente de programação Raspadinha você conhece e ama.",":scratch-intro2":"Você vai precisar de suporte a Flash no seu navegador para isso, se você não tem isso (por exemplo, você estiver usando o iOS) você pode tentar [[pressão]]",":scratch-link":"Comece a usar zero!",":mirobot-connected":"Conectado a Mirobot",":mirobot-error":"Erro ao ligar ao Mirobot",":mirobot-connecting":"Ligar a Mirobot",":scanning":"Digitalização para redes",":no-networks":"Nenhuma rede WiFi encontrada",":reset-settings":"Redefinir as configurações para o padrão",":net-wifi":"Rede Wi-Fi",":password":"Senha",":advanced":"Configurações avançadas",":net-settings":"Configurações de rede",":dhcp":"Use DHCP",":ip":"Endereço de IP",":gw":"porta de entrada",":nm":"Máscara de rede",":dns":"Servidor DNS",":ap-settings":"Configurações do ponto de acesso",":ap-name":"Nome do Ponto de Acesso",":pass-prot":"Protegido por senha",":enable-disc":"Habilitar a descoberta de dispositivos",":python":"pitão",":python-desc":"Programa Mirobot usando a linguagem Python de dentro do seu navegador",":logic":"Lógica",":loops":"Loops",":math":"Matemática",":lists":"listas",":variables":"variáveis",":functions":"Funções","langName":"Português","flag":"pt"},"ru":{"langName":"Русский","flag":"ru"},"si":{"langName":"Slovenščina","flag":"si"},"sv":{"langName":"Svenska","flag":"se"},"tw":{"langName":"繁體中文","flag":"cn"},"zh":{"langName":"简体中文","flag":"cn"},"zh-hans":{"langName":"簡體中文","flag":"cn"},"zh-hant":{"langName":"正體中文","flag":"cn"},"en-US":{"langName":"American English","flag":"us"}}
;
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs=saveAs||function(e){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var t=e.document,n=function(){return e.URL||e.webkitURL||e},o=t.createElementNS("http://www.w3.org/1999/xhtml","a"),r="download"in o,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},a=e.webkitRequestFileSystem,c=e.requestFileSystem||a||e.mozRequestFileSystem,u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},f="application/octet-stream",s=0,d=500,l=function(t){var o=function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()};e.chrome?o():setTimeout(o,d)},v=function(e,t,n){t=[].concat(t);for(var o=t.length;o--;){var r=e["on"+t[o]];if("function"==typeof r)try{r.call(e,n||e)}catch(i){u(i)}}},p=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["﻿",e],{type:e.type}):e},w=function(t,u,d){d||(t=p(t));var w,y,m,S=this,h=t.type,O=!1,R=function(){v(S,"writestart progress write writeend".split(" "))},b=function(){if((O||!w)&&(w=n().createObjectURL(t)),y)y.location.href=w;else{var o=e.open(w,"_blank");void 0==o&&"undefined"!=typeof safari&&(e.location.href=w)}S.readyState=S.DONE,R(),l(w)},g=function(e){return function(){return S.readyState!==S.DONE?e.apply(this,arguments):void 0}},E={create:!0,exclusive:!1};return S.readyState=S.INIT,u||(u="download"),r?(w=n().createObjectURL(t),o.href=w,o.download=u,void setTimeout(function(){i(o),R(),l(w),S.readyState=S.DONE})):(e.chrome&&h&&h!==f&&(m=t.slice||t.webkitSlice,t=m.call(t,0,t.size,f),O=!0),a&&"download"!==u&&(u+=".download"),(h===f||a)&&(y=e),c?(s+=t.size,void c(e.TEMPORARY,s,g(function(e){e.root.getDirectory("saved",E,g(function(e){var n=function(){e.getFile(u,E,g(function(e){e.createWriter(g(function(n){n.onwriteend=function(t){y.location.href=e.toURL(),S.readyState=S.DONE,v(S,"writeend",t),l(e)},n.onerror=function(){var e=n.error;e.code!==e.ABORT_ERR&&b()},"writestart progress write abort".split(" ").forEach(function(e){n["on"+e]=S["on"+e]}),n.write(t),S.abort=function(){n.abort(),S.readyState=S.DONE},S.readyState=S.WRITING}),b)}),b)};e.getFile(u,{create:!1},g(function(e){e.remove(),n()}),g(function(e){e.code===e.NOT_FOUND_ERR?n():b()}))}),b)}),b)):void b())},y=w.prototype,m=function(e,t,n){return new w(e,t,n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,n){return n||(e=p(e)),navigator.msSaveOrOpenBlob(e,t||"download")}:(y.abort=function(){var e=this;e.readyState=e.DONE,v(e,"abort")},y.readyState=y.INIT=0,y.WRITING=1,y.DONE=2,y.error=y.onwritestart=y.onprogress=y.onwrite=y.onabort=y.onerror=y.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof module&&module.exports?module.exports.saveAs=saveAs:"undefined"!=typeof define&&null!==define&&null!=define.amd&&define([],function(){return saveAs});
/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/

;if("document" in self&&!("classList" in document.createElement("_"))){(function(j){"use strict";if(!("Element" in j)){return}var a="classList",f="prototype",m=j.Element[f],b=Object,k=String[f].trim||function(){return this.replace(/^\s+|\s+$/g,"")},c=Array[f].indexOf||function(q){var p=0,o=this.length;for(;p<o;p++){if(p in this&&this[p]===q){return p}}return -1},n=function(o,p){this.name=o;this.code=DOMException[o];this.message=p},g=function(p,o){if(o===""){throw new n("SYNTAX_ERR","An invalid or illegal string was specified")}if(/\s/.test(o)){throw new n("INVALID_CHARACTER_ERR","String contains an invalid character")}return c.call(p,o)},d=function(s){var r=k.call(s.getAttribute("class")||""),q=r?r.split(/\s+/):[],p=0,o=q.length;for(;p<o;p++){this.push(q[p])}this._updateClassName=function(){s.setAttribute("class",this.toString())}},e=d[f]=[],i=function(){return new d(this)};n[f]=Error[f];e.item=function(o){return this[o]||null};e.contains=function(o){o+="";return g(this,o)!==-1};e.add=function(){var s=arguments,r=0,p=s.length,q,o=false;do{q=s[r]+"";if(g(this,q)===-1){this.push(q);o=true}}while(++r<p);if(o){this._updateClassName()}};e.remove=function(){var t=arguments,s=0,p=t.length,r,o=false;do{r=t[s]+"";var q=g(this,r);if(q!==-1){this.splice(q,1);o=true}}while(++s<p);if(o){this._updateClassName()}};e.toggle=function(p,q){p+="";var o=this.contains(p),r=o?q!==true&&"remove":q!==false&&"add";if(r){this[r](p)}return !o};e.toString=function(){return this.join(" ")};if(b.defineProperty){var l={get:i,enumerable:true,configurable:true};try{b.defineProperty(m,a,l)}catch(h){if(h.number===-2146823252){l.enumerable=false;b.defineProperty(m,a,l)}}}else{if(b[f].__defineGetter__){m.__defineGetter__(a,i)}}}(self))};


/*! https://mths.be/startswith v0.2.0 by @mathias */
String.prototype.startsWith||!function(){"use strict";var t=function(){try{var t={},r=Object.defineProperty,e=r(t,t,t)&&r}catch(n){}return e}(),r={}.toString,e=function(t){if(null==this)throw TypeError();var e=String(this);if(t&&"[object RegExp]"==r.call(t))throw TypeError();var n=e.length,i=String(t),a=i.length,o=arguments.length>1?arguments[1]:void 0,h=o?Number(o):0;h!=h&&(h=0);var u=Math.min(Math.max(h,0),n);if(a+u>n)return!1;for(var g=-1;++g<a;)if(e.charCodeAt(u+g)!=i.charCodeAt(g))return!1;return!0};t?t(String.prototype,"startsWith",{value:e,configurable:!0,writable:!0}):String.prototype.startsWith=e}();

// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
Object.keys||(Object.keys=function(){"use strict";var t=Object.prototype.hasOwnProperty,r=!{toString:null}.propertyIsEnumerable("toString"),e=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],o=e.length;return function(n){if("object"!=typeof n&&("function"!=typeof n||null===n))throw new TypeError("Object.keys called on non-object");var c,l,p=[];for(c in n)t.call(n,c)&&p.push(c);if(r)for(l=0;o>l;l++)t.call(n,e[l])&&p.push(e[l]);return p}}());

// From https://github.com/neovov/Fullscreen-API-Polyfill
!function(a){"use strict";function b(b,c){var d=a.createEvent("Event");d.initEvent(b,!0,!1),c.dispatchEvent(d)}function c(c){a[i.enabled]=a[e.enabled],a[i.element]=a[e.element],b(i.events.change,c.target)}function d(a){b(i.events.error,a.target)}var e,f,g=!0,h={w3:{enabled:"fullscreenEnabled",element:"fullscreenElement",request:"requestFullscreen",exit:"exitFullscreen",events:{change:"fullscreenchange",error:"fullscreenerror"}},webkit:{enabled:"webkitIsFullScreen",element:"webkitCurrentFullScreenElement",request:"webkitRequestFullScreen",exit:"webkitCancelFullScreen",events:{change:"webkitfullscreenchange",error:"webkitfullscreenerror"}},moz:{enabled:"mozFullScreenEnabled",element:"mozFullScreenElement",request:"mozRequestFullScreen",exit:"mozCancelFullScreen",events:{change:"mozfullscreenchange",error:"mozfullscreenerror"}},ms:{enabled:"msFullscreenEnabled",element:"msFullscreenElement",request:"msRequestFullscreen",exit:"msExitFullscreen",events:{change:"MSFullscreenChange",error:"MSFullscreenError"}}},i=h.w3;for(f in h)if(h[f].enabled in a){e=h[f];break}return!g||i.enabled in a||!e||(a.addEventListener(e.events.change,c,!1),a.addEventListener(e.events.error,d,!1),a[i.enabled]=a[e.enabled],a[i.element]=a[e.element],a[i.exit]=a[e.exit],Element.prototype[i.request]=function(){return this[e.request].apply(this,arguments)}),e}(document);
var Mirobot = function(url){
  this.url = url;
  if(url) this.connect();
  this.cbs = {};
  this.listeners = [];
  this.sensorState = {follow: null, collide: null};
  this.collideListening = false;
  this.followListening = false;
}

Mirobot.prototype = {

  connected: false,
  error: false,
  timeoutTimer: undefined,
  simulating: false,
  sim: undefined,
  devices: {},

  connect: function(url){
    if(url) this.url = url;
    if(!this.connected && !this.error && this.url){
      var self = this;
      this.has_connected = false;
      this.ws = new WebSocket(this.url);
      this.ws.onmessage = function(ws_msg){self.handle_msg(ws_msg)};
      this.ws.onopen = function(){
        self.connected = true;
        self.robot_state = 'idle';
        self.version(function(){
          self.setConnectedState(true);
        });
      }
      this.ws.onerror = function(err){self.handleError(err)}
      this.ws.onclose = function(err){self.handleError(err)}
      this.connTimeout = window.setTimeout(function(){
        if(!self.connected){
          self.ws.close();
        }
      }, 1000);
    }
  },
  
  fetchDevices: function(cb){
    var self = this;
    var req = new XMLHttpRequest();
    req.addEventListener("load", function(){
      var resp = JSON.parse(this.responseText);
      if(resp.devices && resp.devices.length > 0){
        for(var i = 0; i< resp.devices.length; i++){
          self.devices[resp.devices[i].address] = resp.devices[i];
        }
        cb(self.devices);
      }
    });
    req.addEventListener("error", function(e){
      console.log('Error fetching devices list');
      console.log(e);
    });
    req.open("GET", "http://local.mirobot.io/devices.json");
    req.send();
  },

  disconnect: function(){
    this.connected = false;
    this.error = false
    this.ws.onerror = function(){};
    this.ws.onclose = function(){};
    this.ws.close();
  },

  setConnectedState: function(state){
    var self = this;
    clearTimeout(self.connTimeout);
    self.connected = state;
    if(state){ self.has_connected = true; }
    setTimeout(function(){
      self.emitEvent('readyStateChange', {state: (self.ready() ? 'ready' : 'notReady')});
      self.emitEvent('connectedStateChange', {state: (self.connected ? 'connected' : 'disconnected')});
    }, 500);
    // Try to auto reconnect if disconnected
    if(state){
      if(self.reconnectTimer){
        clearTimeout(self.reconnectTimer);
        self.reconnectTimer = undefined;
      }
    }else{
      if(!self.reconnectTimer){
        self.reconnectTimer = setTimeout(function(){
          clearTimeout(self.reconnectTimer);
          self.reconnectTimer = undefined;
          self.connect();
        }, 5000);
      }
    }
  },

  ready: function(){
    return this.connected || this.simulating;
  },

  setSimulator: function(sim){
    this.sim = sim;
  },

  setSimulating: function(s){
    this.simulating = s;
    this.emitEvent('readyStateChange', {state: (this.ready() ? 'ready' : 'notReady')});
  },
  
  emitEvent: function(event, msg){
    if(typeof this.listeners[event] !== 'undefined'){
      for(var i = 0; i< this.listeners[event].length; i++){
        this.listeners[event][i](msg);
      }
    }
  },

  addEventListener: function(event, listener){
    this.listeners[event] =  this.listeners[event] || [];
    this.listeners[event].push(listener);
  },

  handleError: function(err){
    if(err instanceof CloseEvent || err === 'Timeout'){
      if(this.ws.readyState === WebSocket.OPEN){
        this.ws.close();
      }
      this.msg_stack = [];
    }else{
      console.log(err);
    }
    this.setConnectedState(false);
  },

  move: function(direction, distance, cb){
    this.send({cmd: direction, arg: distance}, cb);
  },

  turn: function(direction, angle, cb){
    if(angle < 0){
      angle = -angle;
      direction = (direction === 'left' ? 'right' : 'left')
    }
    this.send({cmd: direction, arg: angle}, cb);
  },
  
  forward: function(distance, cb){
    this.move('forward', distance, cb);
  },
  
  back: function(distance, cb){
    this.move('back', distance, cb);
  },
  
  left: function(angle, cb){
    this.turn('left', angle, cb);
  },
  
  right: function(angle, cb){
    this.turn('right', angle, cb);
  },

  penup: function(cb){
    this.send({cmd: 'penup'}, cb);
  },

  pendown: function(cb){
    this.send({cmd: 'pendown'}, cb);
  },

  beep: function(duration, cb){
    this.send({cmd: 'beep', arg: duration}, cb);
  },

  collide: function(cb){
    this.send({cmd: 'collide'}, cb);
  },

  follow: function(cb){
    this.send({cmd: 'follow'}, cb);
  },

  slackCalibration: function(cb){
    this.send({cmd: 'slackCalibration'}, cb);
  },

  moveCalibration: function(cb){
    this.send({cmd: 'moveCalibration'}, cb);
  },

  turnCalibration: function(cb){
    this.send({cmd: 'turnCalibration'}, cb);
  },

  calibrateSlack: function(steps, cb){
    this.send({cmd: 'calibrateSlack', arg: "" + steps}, cb);
  },

  calibrateMove: function(factor, cb){
    this.send({cmd: 'calibrateMove', arg: "" + factor}, cb);
  },

  calibrateTurn: function(factor, cb){
    this.send({cmd: 'calibrateTurn', arg: "" + factor}, cb);
  },

  collideState: function(cb){
    if(this.sensorState.collide === null || !this.collideListening){
      var self = this;
      this.send({cmd: 'collideState'}, function(state, msg){
        if(state === 'complete'){
          self.sensorState.collide = msg.msg;
          cb(self.sensorState.collide);
        }
      });
    }else{
      cb(this.sensorState.collide);
    }
  },

  followState: function(cb){
    if(this.sensorState.follow === null || !this.followListening){
      var self = this;
      this.send({cmd: 'followState'}, function(state, msg){
        if(state === 'complete'){
          self.sensorState.follow = msg.msg;
          cb(self.sensorState.follow);
        }
      });
    }else{
      cb(this.sensorState.follow);
    }
  },

  collideSensorNotify: function(state, cb){
    var self = this;
    this.send({cmd: 'collideNotify', arg: (state ? 'true' : 'false')}, function(){
      self.collideListening = true;
      cb();
    });
  },

  followSensorNotify: function(state, cb){
    var self = this;
    this.send({cmd: 'followNotify', arg: (state ? 'true' : 'false')}, function(){
      self.followListening = true;
      cb();
    });
  },

  stop: function(cb){
    var self = this;
    this.send({cmd:'stop'}, function(state, msg, recursion){
      if(state === 'complete' && !recursion){
        for(var i in self.cbs){
          self.cbs[i]('complete', undefined, true);
        }
        self.emitEvent('programComplete');
        self.robot_state = 'idle';
        self.msg_stack = [];
        self.cbs = {};
        if(cb){ cb(state); }
      }
    });
  },
  
  pause: function(cb){
    this.send({cmd:'pause'}, cb);
  },
  
  resume: function(cb){
    this.send({cmd:'resume'}, cb);
  },
  
  ping: function(cb){
    this.send({cmd:'ping'}, cb);
  },

  version: function(cb){
    this.send({cmd:'version'}, cb);
  },

  send: function(msg, cb){
    msg.id = Math.random().toString(36).substr(2, 10)
    if(cb){
      this.cbs[msg.id] = cb;
    }
    if(msg.arg){ msg.arg = msg.arg.toString(); }
    if(['stop', 'pause', 'resume', 'ping', 'version'].indexOf(msg.cmd) >= 0){
      this.send_msg(msg);
    }else{
      if(this.msg_stack.length === 0){
        this.emitEvent('programStart');
      }
      this.msg_stack.push(msg);
      this.process_msg_queue();
    }
  },
  
  send_msg: function(msg){
    var self = this;
    console.log(msg);
    if(this.simulating && this.sim){
      this.sim.send(msg, function(msg){ self.handle_msg(msg) });
    }else{
      //explicitly check if the websocket is open every single time there's an attempt to send a message
      if(this.ws.readyState === WebSocket.OPEN){
          if(this.connected){
          this.ws.send(JSON.stringify(msg));
          if(this.timeoutTimer) clearTimeout(this.timeoutTimer);
          this.timeoutTimer = window.setTimeout(function(){ self.handleError("Timeout") }, 3000);
        }  
      }else{
        // thought the connection was open when it wasn't -> switch internal state to retry connections
        this.setConnectedState(false);
      }
    }
  },
  
  process_msg_queue: function(){
    if(this.robot_state === 'idle' && this.msg_stack.length > 0){
      this.robot_state = 'receiving';
      this.send_msg(this.msg_stack[0]);
    }
  },
  
  handle_msg: function(msg){
    if(typeof msg === 'object' && typeof msg.data === 'string') msg = JSON.parse(msg.data);
    console.log(msg);
    clearTimeout(this.timeoutTimer);
    if(msg.status === 'notify'){
      this.emitEvent(msg.id, msg.msg);
      this.sensorState[msg.id] = msg.msg;
      return;
    }
    if(this.msg_stack.length > 0 && this.msg_stack[0].id == msg.id){
      if(msg.status === 'accepted'){
        if(this.cbs[msg.id]){
          this.cbs[msg.id]('started', msg);
        }
        this.robot_state = 'running';
      }else if(msg.status === 'complete'){
        if(this.cbs[msg.id]){
          this.cbs[msg.id]('complete', msg);
          delete this.cbs[msg.id];
        }
        this.msg_stack.shift();
        if(this.msg_stack.length === 0){
          this.emitEvent('programComplete');
        }
        this.robot_state = 'idle';
        this.process_msg_queue();
      }
    }else{
      if(this.cbs[msg.id]){
        this.cbs[msg.id]('complete', msg);
        delete this.cbs[msg.id];
      }
    }
    if(msg.status && msg.status === 'error' && msg.msg === 'Too many connections'){
      this.error = true;
      this.emitEvent('error');
    }
  },
  
  robot_state: 'idle',
  msg_stack: []
}
;
MirobotSave = function(el, conf){
  var self = this;
  this.el = el;
  this.persister = new Persister(conf);
  this.persister.subscribe(function(){self.handleUpdate();});
  this.init();
  this.persister.init();
}

MirobotSave.prototype.createMenuItem = function(text, cb){
  var li = document.createElement('li');
  li.innerHTML = text;
  li.addEventListener('click', cb);
  return li
}

MirobotSave.prototype.updateFileMenu = function(menu){
  var self = this;
  var progs_ul = menu.querySelector('ul#progs')
  if(progs_ul) progs_ul.innerHTML = '';

  this.persister.fileList(function(files){
    files.map(function(f){
      progs_ul.appendChild(self.createMenuItem(f, function(){ self.openProgram(f);}));
    });
  });
}

MirobotSave.prototype.setSaveFilename = function(name){
  var title = this.el.querySelector('#menu .title');
  if(name){
    title.innerHTML = '['+name+']';
  }else{
    title.innerHTML = '';
  }
}

MirobotSave.prototype.handleUpdate = function(){
  this.setSaveFilename(this.persister.currentProgram);
  this.updateFileMenu(document.getElementById('save'));
}

MirobotSave.prototype.init = function(){
  var self = this;
  var wrap = document.createElement('div');
  wrap.className = 'wrapper';
  this.el.appendChild(wrap);
  var menu = document.createElement('ul');
  menu.id="saveMenu";
  menu.className="subMenu";
  menu.appendChild(this.createMenuItem(l(':save') + ' <span class="title"></span>', function(){ self.saveHandler();}));
  menu.appendChild(this.createMenuItem(l(':save-as') + '...', function(){ self.saveAsHandler();}));
  menu.appendChild(this.createMenuItem(l(':new-prog'), function(){ self.newHandler();}));
  menu.appendChild(this.createMenuItem(l(':delete-prog'), function(){ self.deleteHandler();}));
  menu.appendChild(this.createMenuItem(l(':download'), function(){ self.downloadHandler();}));
  var uploader = document.createElement('input');
  uploader.type = 'file';
  uploader.id = "uploader";
  wrap.appendChild(uploader);
  uploader.addEventListener('change', function(e){ self.uploadFileHandler(e) }, false);
  menu.appendChild(this.createMenuItem(l(':upload'), function(){ self.uploadHandler();}));
  
  var progs_li = document.createElement('li');
  progs_li.innerHTML = l(':open') + ':';
  progs_li.className = 'inactive';
  menu.appendChild(progs_li);
  wrap.appendChild(menu);
  
  var progs_ul = document.createElement('ul');
  progs_ul.id = 'progs';
  progs_ul.className = 'subMenu';
  menu.appendChild(progs_ul);

  new MainMenu(this.el);
  this.el.classList.remove('hidden');

  window.addEventListener("keydown", function(e){ self.handleKeyboard(e);}, false);
}

MirobotSave.prototype.handleKeyboard = function(e){
  if(e.keyCode === 83 && e.metaKey){
    this.saveHandler();
    e.preventDefault();
    return false;
  }
}

MirobotSave.prototype.saveHandler = function(){
  if(this.persister.currentProgram){
    this.persister.save();
  }else{
    this.saveAsHandler();
  }
}

MirobotSave.prototype.saveAsModal = function(){
  var el = document.createElement('div');
  el.id = "saveAsModal";
  var p = document.createElement('p');
  p.innerHTML = l(':choose-name');
  el.appendChild(p);
  var input = document.createElement('input');
  input.type = "text"
  el.appendChild(input);
  return el
}

MirobotSave.prototype.saveAsHandler = function(){
  var self = this;
  var modal = nanoModal(this.saveAsModal(), {
    autoRemove: true,
    buttons: [
      {
        text: "Cancel",
        handler: "hide",
        primary: false
      },
      {
        text: "Save",
        primary: true,
        handler: function(modal) {
          var filename = document.querySelector("#saveAsModal input").value;
          if(filename && filename !== ''){
            self.persister.exists(filename, function(exists){
              if(exists){
                modal.hide();
                nanoModal(l(':exists'), {autoRemove: true}).show().onHide(modal.show);
              }else{
                self.persister.saveAs(filename);
                modal.hide();
              }
            })
          }
        }
      }
    ]
  });
  modal.show();
}

MirobotSave.prototype.uploadHandler = function(){
  this.checkSaved(function(res){
    if(res) document.getElementById('uploader').click();
  });
}

MirobotSave.prototype.uploadFileHandler = function(e){
  var self = this;
  e.stopPropagation();
  e.preventDefault();
  if(typeof e.dataTransfer !== 'undefined'){
    var files = e.dataTransfer.files;
  }else if(typeof e.target !== 'undefined'){
    var files = e.target.files;
  }
  if(files.length > 1) return nanoModal(l(':single-file'), {autoRemove: true}).show();
  
  // Read the file
  var r = new FileReader(files[0]);
  r.onload = function(e) { self.loadFromFile(e.target.result) }
  r.readAsText(files[0]);
  
  return false;
}

MirobotSave.prototype.loadFromFile = function(content){
  this.persister.new();
  this.persister.loadHandler(content);
}

MirobotSave.prototype.checkSaved = function(cb){
  this.persister.unsaved(function(unsaved){
    if(unsaved){
      nanoConfirm(l(':unsaved'), function(res){
        cb(res);
      });
    }else{
      cb(true);
    }
  });
}

MirobotSave.prototype.newHandler = function(){
  var self = this;
  this.checkSaved(function(res){
    if(res) self.persister.new();
  });
}

MirobotSave.prototype.downloadHandler = function(){
  this.persister.downloadCurrent();
}

MirobotSave.prototype.deleteHandler = function(){
  var self = this;
  var filename = this.persister.currentProgram;
  if(filename && filename !== ''){
    nanoConfirm(l(':sure') + " '" + filename + "'? " + l(':permanent') + '.', function(res){
      if(res) self.persister.delete(filename);
    });
  }
}

MirobotSave.prototype.openProgram = function(filename){
  var self = this;
  this.checkSaved(function(res){
    if(res && filename && filename !== '') self.persister.load(filename);
  });
}
;
var initLocalStorage = function(){
  try {
    localStorage.setItem('test', true);
    localStorage.removeItem('test');
    return window.localStorage;
  } catch (e) {
    // No local storage
    if('chrome' in window && 'storage' in window.chrome){
      // We are running as a chrome app
      return window.chrome.storage;
    }else{
      return false;
    }
  }
}

Line = function(x1, y1, x2, y2, steps, draw){
  this.start = {x:x1, y:y1}
  this.end = {x:x2, y:y2}
  this.totalSteps = steps;
  this.currentStep = 0;
  this.shouldDraw = draw;

  this.setEndpoint = function(x, y){
    this.end = {x:x, y:y}
  }

  this.draw = function(context, offset){
    if(this.shouldDraw){
      context.strokeStyle = '#000000';
      context.beginPath();
      context.lineWidth = 1;
      context.moveTo(this.start.x + offset.x, this.start.y + offset.y);
      context.lineTo(this.currentEndpoint().x + offset.x, this.currentEndpoint().y + offset.y);
      context.stroke();
      context.closePath();
    }
  }

  this.currentEndpoint = function(){
    if(this.currentStep > this.totalSteps){
      this.currentStep = this.totalSteps;
    }
    var dx = this.end.x - this.start.x;
    var dy = this.end.y - this.start.y;
    var _dx = (dx / this.totalSteps) * this.currentStep;
    var _dy = (dy / this.totalSteps) * this.currentStep;
    return {x: this.start.x + _dx, y: this.start.y + _dy};
  }
}

MirobotSim = function(button_id, mirobot){
  var self = this;
  this.localStorage = initLocalStorage();
  this.mirobot = mirobot;
  this.hide = false;
  this.button = document.getElementById(button_id);
  this.button.classList.remove('hidden');
  this.button.innerHTML = "<span>" + l(':simulate') + '</span> <div class="onoffswitch">\
    <input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="myonoffswitch">\
    <label class="onoffswitch-label" for="myonoffswitch"></label>\
</div>'
  var enable = this.button.querySelector('input');
  this.sim = document.createElement('div')
  this.sim.id = 'simArea';
  document.body.appendChild(this.sim);
  this.turtle = new Turtle(this.sim);
  this.resizer = document.createElement('div');
  this.resizer.id = 'resizer';
  this.resizer.innerHTML = '&#8690;';
  this.sim.appendChild(this.resizer);

  var label = document.createElement('span');
  label.className = 'label';
  label.innerHTML = l(":100mm-grid");
  this.sim.appendChild(label);

  var settings = document.createElement('div');
  settings.className = 'settings';
  settings.innerHTML = '<label>' + l(':fast-sim') + '<input type="checkbox" class="fastSim"></label><label>' + l(':hide-sim') + '<input type="checkbox" class="hideSim"></label>';

  // Setting to run faster
  var fastSim = settings.querySelector('.fastSim');
  fastSim.addEventListener('click', function(e){
    if(fastSim.checked){
      self.turtle.setSpeed(5);
    }else{
      self.turtle.setSpeed(1);
    }
  });

  // set the auto hide state
  var setHide = function(state){
    self.hide = state;
    hideSimEl.checked = state;
    if(self.localStorage) self.localStorage['mirobot-simulate-hide'] = state;
  }

  // Setting to auto hide the simulator
  var hideSimEl = settings.querySelector('.hideSim');
  hideSimEl.addEventListener('change', function(e){
    setHide(hideSimEl.checked);
    if(hideSimEl.checked){
      window.setTimeout(function(){
        self.sim.classList.remove('show');
      }, 500);
    }else{
    }
  });
  // Reinstate the localstorage setting for autohide
  if(this.localStorage && this.localStorage['mirobot-simulate-hide'] === 'true') setHide(true);

  // Add a reset button
  var reset = document.createElement('button');
  reset.innerHTML = l(":reset-sim");
  this.sim.appendChild(reset);
  reset.addEventListener('click', function(e){ self.turtle.reset(e) });

  this.sim.appendChild(settings);

  // Show the simulator
  var showSim = function(){
    self.sim.classList.add('show');
    self.turtle.init();
  }

  // Hide the simulator
  var hideSim = function(){
    self.sim.classList.remove('show');
  }

  // handle changes in the checkbox
  var inputChangeHandler = function(e){
    if(enable.checked){
      showSim();
    }else{
      setHide(false);
      hideSim();
    }
    if(e) e.preventDefault();
  }

  // Set simulation on or off
  var setSim = function(state, e){
    self.mirobot.setSimulating(state);
    enable.checked = state;
    inputChangeHandler(e);
    // store setting in localStorage
    if(self.localStorage) self.localStorage['mirobot-simulate'] = state;
  }
  if(this.localStorage && this.localStorage['mirobot-simulate'] === 'true') setSim(true);

  // Enable / disable the simulator
  enable.addEventListener('change', inputChangeHandler);

  // Handle the clicks fro the main button
  this.button.addEventListener('click', function(e){
    if(self.hide){
      // if autohide, just show or hide the sim
      self.sim.classList.contains('show') ? hideSim() : showSim();
    }else{
      // otherwise, turn simulation on or off
      setSim(!self.sim.classList.contains('show'), e);
    }
  });

  // show and auto hide the sim when clicking run
  this.mirobot.addEventListener('programStart', function(){
    if(self.mirobot.simulating){
      showSim();
      reset.disabled = true
    }
  });
  this.mirobot.addEventListener('programComplete', function(e){
    if(self.mirobot.simulating){
      reset.disabled = false
      if(self.hide){
        window.setTimeout(function(){
          self.sim.classList.remove('show');
        }, 3000);
      }
    }
  })

  if(self.localStorage && self.localStorage['mirobot-simulate-width']){
    self.sim.style.width = self.localStorage['mirobot-simulate-width'] + "px";
    self.sim.style.height = self.localStorage['mirobot-simulate-height'] + "px";
    self.turtle.resize();
  }

  var startX, startY, startW, startH;

  var drag = function(e){
    var diffX = e.clientX - startX;
    var diffY = e.clientY - startY;
    self.sim.style.width = startW - diffX + "px";
    self.sim.style.height = startH + diffY + "px";
    self.turtle.resize();
    e.preventDefault();
  }

  var startDrag = function(e){
    startX = e.clientX;
    startY = e.clientY;
    startW = self.sim.getBoundingClientRect().width;
    startH = self.sim.getBoundingClientRect().height;
    document.addEventListener('mousemove', drag, false);
    document.addEventListener('touchmove', drag, false);
    document.addEventListener('mouseup', endDrag, false);
    document.addEventListener('touchend', endDrag, false);
    e.preventDefault();
  }

  var endDrag = function(e){
    if(self.localStorage){
      self.localStorage['mirobot-simulate-width'] = self.sim.getBoundingClientRect().width;
      self.localStorage['mirobot-simulate-height'] = self.sim.getBoundingClientRect().height;
    }
    document.removeEventListener('mousemove', drag, false);
    document.removeEventListener('touchmove', drag, false);
    document.removeEventListener('mouseup', endDrag, false);
    document.removeEventListener('touchend', endDrag, false);
    e.preventDefault();
  }

  this.resizer.addEventListener('mousedown', startDrag, false);
  this.resizer.addEventListener('touchstart', startDrag, false);

  this.send = function(msg, cb){
    this.process(msg, cb)
  }

  var completeCb = function(cb, id, msg){
    var output = {status: 'complete', id: id};
    if(msg) output.msg = msg;
    return function(){
      cb(output);
    }
  }

  this.process = function(msg, cb){
    if(['stop', 'pause', 'resume', 'ping', 'version'].indexOf(msg.cmd) >= 0){
      if(msg.cmd === 'stop'){
        //stop the turtle moving
        this.turtle.stop(completeCb(cb, msg.id));
      }else if(msg.cmd === 'pause'){
        //stop the turtle moving
        this.turtle.pause(completeCb(cb, msg.id));
      }else if(msg.cmd === 'resume'){
        //stop the turtle moving
        this.turtle.resume(completeCb(cb, msg.id));
      }else if(msg.cmd === 'ping'){
        //stop the turtle moving
        completeCb(cb, msg.id)();
      }else if(msg.cmd === 'version'){
        //stop the turtle moving
        completeCb(cb, msg.id, 'sim')();
      }
    }else{
      if(self.turtle.moving){
        return cb({status: "error", id: msg.id});
      }
      cb({status: 'accepted', id: msg.id});
      if(msg.cmd === 'left'){
        var angle = -Number(msg.arg);
        this.turtle.rotate(angle, completeCb(cb, msg.id))
      }else if(msg.cmd === 'right'){
        var angle = Number(msg.arg);
        this.turtle.rotate(angle, completeCb(cb, msg.id))
      }else if(msg.cmd === 'forward'){
        var distance = Number(msg.arg);
        this.turtle.move(distance, completeCb(cb, msg.id))
      }else if(msg.cmd === 'back'){
        var distance = -Number(msg.arg);
        this.turtle.move(distance, completeCb(cb, msg.id))
      }else if(msg.cmd === 'penup'){
        this.turtle.penup(completeCb(cb, msg.id))
      }else if(msg.cmd === 'pendown'){
        this.turtle.pendown(completeCb(cb, msg.id))
      }else if(msg.cmd === 'beep'){
        this.turtle.beep(Number(msg.arg), completeCb(cb, msg.id))
      }else{
        return cb({status: "error", id: msg.id});
      }
    }
  }
}


var Turtle = function(el){
  var self = this;
  this.el = el;
  this.penDown = true;
  this.moving = false;
  this.prev_angle = 0;
  this.curr_angle = 0;
  this.angle = 0;
  this.robotLoc = {x:0, y:0};
  this.drawList = [];
  this.initted = false;
  this.speed = 1;
  this.stopped = false;

  function rotatePoint(point, angle){
    var xr = point[0] * Math.cos(angle) - point[1] * Math.sin(angle);
    var yr = point[0] * Math.sin(angle) + point[1] * Math.cos(angle);
    return [xr, yr];
  }
  function rotate(points, angle) {
    var angle = angle * Math.PI / 180 // Convert to radians
    for(var i=0; i<points.length; i++){
      points[i] = rotatePoint(points[i], angle);
    }
  }

  this.setSpeed = function(speed){
    this.speed = speed;
  }

  this.remapX = function(x){
    return x + this.canvas.getBoundingClientRect().width/2;
  }

  this.remapY = function(y){
    return y + this.canvas.getBoundingClientRect().height/2;
  }

  this.drawTurtle = function(){
    var points = [[6, 6], [0, -10], [-6, 6]]
    rotate(points, this.angle);

    this.context.strokeStyle = '#EE0000';
    this.context.fillStyle = (this.penDown ? "rgba(255, 0, 0, 0.7)" : "rgba(255, 255, 255, 0.7)");
    this.context.beginPath();
    this.context.lineWidth = 1;
    this.context.moveTo(self.remapX(this.robotLoc.x+points[2][0]), self.remapY(this.robotLoc.y+points[2][1]));
    for(var i = 0; i<points.length; i++){
      this.context.lineTo(self.remapX(this.robotLoc.x+points[i][0]), self.remapY(this.robotLoc.y+points[i][1]));
    }
    this.context.stroke();
    this.context.fill();
    this.context.closePath();
  }

  this.draw = function(){
    //clear the canvas
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    //draw the base grid
    this.drawGrid();
    //draw each line
    for(var i=0; i<self.drawList.length; i++){
      self.drawList[i].draw(self.context, {x: self.remapX(0), y: self.remapY(0)});
    }
    //draw the robot
    this.drawTurtle();
  }

  this.move = function(distance, cb){
    if(this.moving) return;
    this.moving = true;
    this.stopped = false;
    var rads = this.angle * (Math.PI/180);
    if(distance < 0) rads -= Math.PI;
    distance = Math.abs(distance);
    var rate = 1;
    var destX = this.robotLoc.x + Math.sin(rads) * distance;
    var destY = this.robotLoc.y - Math.cos(rads) * distance;
    var steps = Math.ceil(distance/rate);

    this.drawList.push(new Line(this.robotLoc.x, this.robotLoc.y, destX, destY, steps, this.penDown));

    var animate = function(){
      if(self.stopped) return;
      if(self.paused) return window.requestAnimationFrame(animate);
      var lastLine = self.drawList[self.drawList.length - 1];
      if(lastLine.currentStep < lastLine.totalSteps){
        lastLine.currentStep += self.speed;
        self.robotLoc.x = lastLine.currentEndpoint().x;
        self.robotLoc.y = lastLine.currentEndpoint().y;
        self.draw();
        window.requestAnimationFrame(animate);
      }else{
        self.moving = false;
        cb();
      }
    }
    animate();
  }

  this.rotate = function(angle, cb){
    if(this.moving) return;
    this.moving = true;
    this.stopped = false;
    var rate = 1;
    var steps = Math.abs(angle / rate);
    var amount = angle / steps;
    var startAngle = self.angle;
    var step = 0;

    var animate = function(){
      if(self.stopped) return;
      if(self.paused) return window.requestAnimationFrame(animate);
      step += self.speed;
      if(step > steps) step = steps;
      self.angle = startAngle + (amount * step);
      self.draw();
      if(step === steps){
        self.moving = false;
        cb();
      }else{
        window.requestAnimationFrame(animate);
      }
    }
    animate();
  }

  this.penup = function(cb){
    this.penDown = false;
    this.draw();
    window.setTimeout(cb, 250);
  }

  this.pendown = function(cb){
    this.penDown = true;
    this.draw();
    window.setTimeout(cb, 250);
  }

  this.beep = function(duration, cb){
    //TODO: use sound in the browser
    window.setTimeout(cb, duration);
  }

  this.stop = function(cb){
    this.stopped = true;
    this.moving = false;
    if(cb) cb();
  }

  this.pause = function(cb){
    this.paused = true;
    cb();
  }

  this.resume = function(cb){
    this.paused = false;
    cb();
  }

  this.reset = function(e){
    this.moving = false;
    this.angle = 0;
    this.robotLoc={x:0,y:0};
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.drawList = [];
    this.stop();
    this.draw();
    e.preventDefault();
    e.cancelBubble = true;
  }

  this.drawGrid = function(){
    var gridSize = 100;
    var w = this.canvas.getBoundingClientRect().width;
    var h = this.canvas.getBoundingClientRect().height;
    var x = (w/2)%gridSize;
    var y = (h/2)%gridSize;
    this.context.beginPath();
    this.context.strokeStyle = '#DDD';
    this.context.lineWidth = 1;
    while(y < h){
      this.context.moveTo(0, y);
      this.context.lineTo(w, y);
      this.context.stroke();
      y += gridSize;
    }

    while(x < w){
      this.context.moveTo(x, 0);
      this.context.lineTo(x, h);
      this.context.stroke();
      x += gridSize;
    }
    this.context.closePath();
  }

  this.resize = function(){
    this.canvas.width = this.el.clientWidth;
    this.canvas.height = this.el.clientHeight;

    this.context.canvas.width = this.canvas.getBoundingClientRect().width;
    this.context.canvas.height = this.canvas.getBoundingClientRect().height;
    this.draw();
  }

  this.init = function(){
    if(!this.initted){
      this.initted = true;
      this.resize();
      this.draw();
    }
  }

  this.addTurtle = function(){
    this.canvas = document.createElement('canvas');
    this.context = this.canvas.getContext('2d');
    this.el.appendChild(this.canvas);
  }

  this.addTurtle();
}
;
MirobotConn = function(mirobot, options){
  var self = this;

  this.extractConfig = function(){
    var hashConfig = {};
    if(window.location.hash !== ''){
      window.location.hash.replace('#', '').split('&').map(function(el){
        var split = el.split('=');
        hashConfig[split[0]] = split[1];
      });
    }
    return hashConfig;
  }

  this.connect = function(address){
    if(self.address !== address){
      if(this.mirobot.connected){
        this.mirobot.disconnect();
      }
      console.log('connecting to ' + address)
      self.address = address;
      self.has_connected = false;
      self.connState = 'connecting';
      self.mirobot.connect('ws://' + address + ':8899/websocket');
      self.updateMenu();
    }
  }
  
  this.autoConnect = function(){
    var conf = this.extractConfig();
    if(typeof conf['m'] !== 'undefined'){
      // Check if there's already an address in the URL
      this.connect(conf['m']);
    }
    // Fetch the devices anyway in case you want to change
    mirobot.fetchDevices(function(devices){
      if(Object.keys(devices).length == 1){
        self.connect(Object.keys(devices)[0]);
      }
      self.updateMenu();
    });
  }
  
  this.updateMenu = function(){
    this.menu.setDevices(mirobot.devices, this.address);
    this.menu.setConnState(this.connState);
  }

  this.connHandler = function(e){
    if(e.state === 'connected'){
      this.connState = 'connected';
      this.has_connected = true;
      window.location = '#m=' + this.address;
      updateLinks();
    }else if(e.state === 'disconnected'){
      if(!this.has_connected){
        this.connState = 'cant_connect';
      }else{
        this.connState = 'disconnected';
      }
    }
    this.updateMenu();
  }

  this.init = function(){ 
    this.mirobot = mirobot;
    this.mirobot.addEventListener('connectedStateChange', function(r){ self.connHandler(r) });
    this.extractConfig();
    this.menu = new MirobotConnMenu('conn')
    this.connState = 'not_set';
    this.menu.onConnect(function(address){
      self.connect(address);
    });
    this.autoConnect();
  }
  
  this.init();
}

// Handles the dom implementation of the connection menu
MirobotConnMenu = function(el){
  var self = this;
  this.connectCb = undefined;
  this.el = document.getElementById(el);
  this.selectedMenu = [];
  this.menuData = {};

  this.init = function(){
    this.devices = {};
    this.el.innerHTML += '<div class="wrapper"><ul class="subMenu"></ul></div>';
    new MainMenu(this.el)
    this.updateConnMenu();
  }
  
  this.onConnect = function(cb){
    this.connectCb = cb;
  }

  this.selectedNode = function(){
    var n = self.menuData;
    for(var i = 0; i< self.selectedMenu.length; i++){
      n = n[self.selectedMenu[i]];
    }
    return n;
  }

  this.updateConnMenu = function(){
    var menu = this.el.querySelector('.subMenu');
    menu.innerHTML = '';
    
    var clickHandler = function(node){
      return function(e){
        var selected = self.selectedNode();
        if(typeof selected[node] !== 'undefined'){
          selected = selected[node];
        }
        if(typeof selected.__address__ === 'undefined'){
          // It's an organisational node
          self.selectedMenu.push(node);
          self.updateConnMenu();
        }else{
          if(self.connectCb) self.connectCb(selected.__address__);
        }
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }

    var selectedMenu = self.selectedNode();
    if(selectedMenu && typeof selectedMenu.__address__ !== 'undefined'){
      // It's a selected device so use the parent node
      selectedMenu = selectedMenu.__parent__;
    }
    
    if(self.selectedMenu.length > 0){
      // Add the back button
      var backEl = document.createElement('li');
      backEl.innerHTML += '← Back <span class="address">(' + selectedMenu.__name__ + ')</span>';
      backEl.addEventListener('click', function(){
        self.selectedMenu.pop();
        self.updateConnMenu();
      });
      menu.appendChild(backEl);
    }else{
      // Add the manual entry box
      var devEl = document.createElement('li');
      devEl.innerHTML = '<p>' + l(':address') + ':</p><input type="text" placeholder="192.168.1.100" value=""/><button>' + l(':connect') + '</button>';
      devEl.querySelector('input').addEventListener('keypress', function(e){
         if(e && e.keyCode == 13) return submit(e);
      })
      devEl.querySelector('button').addEventListener('click', function(e){
        e.preventDefault();
        return submit(e)
      });
      menu.appendChild(devEl);
    }

    for(var menuItem in selectedMenu){
      if(selectedMenu.hasOwnProperty(menuItem) && menuItem !== '__name__'){
        var devEl = document.createElement('li');
        if(typeof selectedMenu[menuItem]['__address__'] !== 'undefined'){
          devEl.innerHTML = menuItem + ' <span class="address">(' + selectedMenu[menuItem]['__address__'] + ')</span>';
        }else{
          devEl.innerHTML = menuItem + ' →';
        }
        devEl.addEventListener('click', clickHandler(menuItem));
        if(this.selected_device === selectedMenu[menuItem]['__address__'] || this.devices[this.selected_device].name.substring(0, selectedMenu[menuItem].__name__.length) == selectedMenu[menuItem].__name__){
          devEl.classList.add('selected');
        }
        menu.appendChild(devEl);
      }
    }

    var submit = function(e){
      var ip = document.querySelector('#conn input').value;
      if(ip) if(self.connectCb) self.connectCb(ip);
      return false;
    }
  }


  this.parseDevices = function(devices){
    self.menuData = {};
    for(var device in devices){
      var splitName = devices[device].name.split(':');
      var dest = self.menuData;
      for(var token in splitName){
        if(token == (splitName.length - 1)){
          dest[splitName[token]] = {__name__: devices[device].name, __address__: devices[device].address, __parent__: dest};
        }else{
          if(typeof dest[splitName[token]] === 'undefined'){
            dest[splitName[token]] = {};
            //debugger
            dest[splitName[token]].__name__ = splitName.slice(0, token+1).join(':');
          }
          dest = dest[splitName[token]];
        }
      }
    }
  }

  this.setDevices = function(devices, selected){
    this.devices = devices;
    if(typeof this.devices[selected] === 'undefined'){
      this.devices[selected] = {address: selected, name: "Mirobot", last_seen: -1};
    }else{
      this.selectedMenu = this.devices[selected].name.split(':');
      this.selectedMenu.pop();
    }
    this.parseDevices(this.devices);
    this.selected_device = selected;
    this.updateConnMenu();
  }

  this.setConnState = function(connState){
    this.connState = connState;
    switch(connState){
      case 'not_set':
        this.el.classList.remove('connected');
        this.el.classList.remove('error');
        break;
      case 'connected':
        this.el.classList.remove('error');
        this.el.classList.add('connected');
        break;
      case 'connecting':
        this.el.classList.remove('connected');
        this.el.classList.remove('error');
        break;
      case 'cant_connect':
        this.el.classList.remove('connected');
        this.el.classList.add('error');
        break;
      case 'disconnected':
        this.el.classList.remove('connected');
        this.el.classList.add('error');
        break;
    }
    this.updateConnMenu();
  }
  
  this.init();
}
;
MirobotApp = function(options){
  options = options || {};
  window.l10n = (typeof options.l10n !== 'undefined' && options.l10n);
  this.simulation = !!options.simulation;
  this.languages =  options.languages;
  if(l10n) l10nMenu('l10n', this.languages);
  this.initFullScreenButton();
  this.mirobot = new Mirobot();
  if(this.simulation){
    var sim = new MirobotSim('sim', this.mirobot);
    this.mirobot.setSimulator(sim);
  }
  new MirobotConn(this.mirobot);
}

MirobotApp.prototype.supportsLocalStorage = function(){
  try {
    return 'localStorage' in window && window['localStorage'] !== null;
  } catch (e) {
    return false;
  }
}

MirobotApp.prototype.initPersistence = function(conf){
  if(this.supportsLocalStorage()){
    this.saveMenu = new MirobotSave(document.querySelector('#save'), conf);
  }
}

MirobotApp.prototype.initFullScreenButton = function(conf){
  if(typeof document.fullscreenEnabled === 'undefined') return document.querySelector('#fullscreen').classList.add('hidden');

  var setBodyClass = function(){
    var fn = document.fullscreenElement ? 'add' : 'remove'
    document.body.classList[fn]('fullscreen');
  }

  document.getElementById('fullscreen').addEventListener('click', function(){
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  });
  document.addEventListener('fullscreenchange', setBodyClass, false);
  setBodyClass();
}

;
var AsyncLocalStorageInterface = function(){
  this.getItem = function(item, cb){
    cb(window.localStorage.getItem(item));
  }
  this.setItem = function(item, value, cb){
    cb(window.localStorage.setItem(item, value));
  }
  this.removeItem = function(item, cb){
    cb(window.localStorage.removeItem(item));
  }
  this.length = function(cb){
    cb(window.localStorage.length);
  };
  this.keys = function(cb){
    var keys = [];
    for(var i=0; i< window.localStorage.length; i++){
      keys.push(window.localStorage.key(i));
    }
    cb(keys);
  };
}

var ChromeSandboxStorageInterface = function(){
  var self = this;
  this.id = 0;
  this.cbs = {};
  window.addEventListener('message', function(event) {
    if(event.data.id && typeof self.cbs[event.data.id] !== 'undefined'){
      self.cbs[event.data.id](event.data.output);
      delete self.cbs[event.data.id];
    }
  });

  this.sendCommand = function(cmd, params, cb){
    this.id++;
    this.cbs[this.id] = cb;
    parent.postMessage({command: cmd, params: params, id:this.id}, "*");
  }

  this.getItem = function(item, cb){
    this.sendCommand("getItem", item, cb);
  }
  this.setItem = function(item, value, cb){
    var out = {}
    out[item] = value;
    this.sendCommand("setItem", out, cb);
  }
  this.removeItem = function(item, cb){
    this.sendCommand("removeItem", item, cb);
  }
  this.keys = function(cb){
    this.sendCommand("keys", null, cb);
  };
  this.length = function(cb){
    this.sendCommand("length", null, cb);
  };
}


var Persister = function(conf){
  var self = this;
  this.namespace = window.location.pathname.replace(/\//g, '').replace('index.html', '');
  window.addEventListener('pagehide', function(){return self.handleUnload();});
  window.addEventListener('beforeunload', function(){return self.handleUnload();});
  if(conf.saveHandler && typeof conf.saveHandler === 'function' && conf.loadHandler && typeof conf.loadHandler === 'function'){
    this.saveHandler = conf.saveHandler;
    this.loadHandler = conf.loadHandler;
    this.clearHandler = conf.clearHandler;
  }
  this.fileType = conf.fileType || 'txt';
}

Persister.prototype = {
  listeners: [],
  init: function(){
    var self = this;
    self.initLocalStorage();
    if(!self.localStorage) return;
    self.localStorage.getItem('/' + self.namespace + '/currentProgram', function(currentProgram){
      self.currentProgram = currentProgram;
      self.localStorage.getItem('/' + self.namespace + '/unsaved', function(unsavedProgram){
        self.unsaved(function(unsaved){
          if(unsaved && unsavedProgram){
            self.loadHandler(unsavedProgram);
            self.notify();
          }else{
            if(self.currentProgram){
              self.localStorage.getItem('/' + self.namespace + '/programs/' + self.currentProgram, function(program){
                if(program){
                  self.loadHandler(program);
                  self.notify();
                }
              });
            }
          }
        });
      });
    });
  },
  initLocalStorage: function(){
    try {
      window.localStorage.setItem('test', true);
      window.localStorage.removeItem('test');
      this.localStorage = new AsyncLocalStorageInterface();
    } catch (e) {
      // No local storage
      if('chrome' in window && 'storage' in window.chrome){
        // We are running as a chrome app
        console.log("Running in Chrome");
        this.localStorage = new ChromeSandboxStorageInterface();
      }else if('chrome' in window && typeof localStorage === 'undefined'){
        console.log("Running in Chrome Sandbox");
        this.localStorage = new ChromeSandboxStorageInterface();
      }else{
        this.localStorage = false;
      }
    }
  },
  load: function(name){
    var self = this;
    self.localStorage.getItem('/' + self.namespace + '/programs/' + name, function(program){
      if(program){
        self.currentProgram = name;
        self.localStorage.setItem('/' + self.namespace + '/currentProgram', name, function(){
          self.clearHandler();
          self.loadHandler(program);
          self.notify();
        });
      }
    });
  },
  handleUnload: function(){
    this.localStorage.setItem('/' + this.namespace + '/unsaved', this.saveHandler(this.currentProgram || 'untitled'), function(){});
  },
  unsaved: function(cb){
    var self = this;
    this.localStorage.getItem('/' + this.namespace + '/programs/' + this.currentProgram, function(current){
      cb(!self.currentProgram || current !== self.saveHandler(self.currentProgram));
    });
  },
  exists: function(name, cb){
    this.localStorage.getItem('/' + this.namespace + '/programs/' + name, function(res){
      cb(!!res);
    });
  },
  saveAs: function(name){
    var self = this;
    self.localStorage.setItem('/' + self.namespace + '/currentProgram', name, function(){
      self.currentProgram = name;
      self.saveProgram();
      self.notify();
    });
  },
  save: function(){
    this.saveProgram();
  },
  downloadCurrent: function(){
    if(this.currentProgram){
      var blob = new Blob([this.saveHandler(this.currentProgram)], {type: "text/plain;charset=utf-8"});
      var fileName = this.namespace + '-' + this.currentProgram + '.' + this.fileType;
      saveAs(blob, fileName);
    }
  },
  delete: function(program){
    var self = this;
    this.localStorage.getItem('/' + self.namespace + '/currentProgram', function(prog){
      if(prog === program){
        self.localStorage.removeItem('/' + self.namespace + '/currentProgram', function(){});
      }
      self.localStorage.removeItem('/' + self.namespace + '/programs/' + program, function(){});
      self.currentProgram = undefined;
      self.clearHandler();
      self.notify();
    });
  },
  new: function(){
    this.currentProgram = undefined;
    this.clearHandler();
    this.notify();
  },
  saveProgram: function(){
    this.localStorage.setItem('/' + this.namespace + '/programs/' + this.currentProgram, this.saveHandler(this.currentProgram), function(){});
  },
  notify: function(){
    for(var i in this.listeners){
      if(this.listeners.hasOwnProperty(i)){
        this.listeners[i]();
      }
    }
  },
  subscribe: function(cb){
    this.listeners.push(cb);
  },
  fileList: function(cb){
    var self = this;
    var files = [];
    var prefix = '/' + this.namespace + '/programs/';
    this.localStorage.keys(function(keys){
      var out = [];
      for(var i = 0; i< keys.length; i++){
        if(keys[i].startsWith(prefix)){
          out.push(keys[i].replace(prefix, ''));
        }
      }
      console.log(out);
      cb(out);
    });
  }
}
;
var MainMenu = function(el){
  var timer;
  
  var toggleMenu = function(e){
    el.classList.toggle('show');
    e.preventDefault();
    return false;
  }

  var hideMenu = function(e){
    el.classList.remove('show');
    if(e) e.preventDefault();
    return false;
  }  

  var handleKeyboard = function(e){
    if(e.keyCode === 27){
      hideMenu();
      e.preventDefault();
      return false;
    }
  }
  
  el.addEventListener('mouseup', toggleMenu);
  el.querySelector('.wrapper').addEventListener('mouseup', function(e){
    e.stopPropagation();
  });
  el.addEventListener('mouseleave', function(){
    timer = window.setTimeout(hideMenu, 500);
  });
  el.addEventListener('mouseenter', function(){
    if(timer){
      window.clearTimeout(timer);
      timer = undefined;
    }
  });
  window.addEventListener("keydown", function(e){ handleKeyboard(e);}, false);
}

var isChromeApp = function(){
  return window.chrome && chrome.runtime && chrome.runtime.id;
}

/*
  Update the links so that they preserve the language and mirobot config
*/
var updateLinks = function(){
  [].forEach.call(document.links, function(l) {
    if(l.getAttribute('data-relink') && l.getAttribute('data-relink') === 'false') return;
    if(l.href.startsWith('mailto')) return;
    l.href = l.href.split('?')[0];
    l.href = l.href.split('#')[0];
    // Make the URL have index.html if running as a chrome app
    if(isChromeApp()){
      if(l.href.slice(-1) === '/'){
        l.href += 'index.html';
      }
    }
    // Add the query for the language
    l.href += document.location.search;
    // Add the hash for configuring Mirobot    
    l.href += document.location.hash;
  });
}

document.addEventListener('DOMContentLoaded', updateLinks);
/*! @source http://purl.eligrey.com/github/l10n.js/blob/master/l10n.js*/

(function(){"use strict";var q="undefined",a="string",m=self.navigator,o=String,l=Object.prototype.hasOwnProperty,z={},B={},t=!1,k=!0,s=/^\s*application\/(?:vnd\.oftn\.|x-)?l10n\+json\s*(?:$|;)/i,p,A="locale",j="defaultLocale",r="toLocaleString",e="toLowerCase",x=Array.prototype.indexOf||function(E){var C=this.length,D=0;for(;D<C;D++){if(D in this&&this[D]===E){return D}}return -1},b=function(C){var i=new p();i.open("GET",C,t);i.send(null);if(i.status!==200){setTimeout(function(){var D=new Error("Unable to load localization data: "+C);D.name="Localization Error";throw D},0);return{}}else{return JSON.parse(i.responseText)}},n=o[r]=function(D){if(arguments.length>0&&typeof D!=="number"){if(typeof D===a){n(b(D))}else{if(D===t){B={}}else{var i,E,C;for(i in D){if(l.call(D,i)){E=D[i];i=i[e]();if(!(i in B)||E===t){B[i]={}}if(E===t){continue}if(typeof E===a){if(o[A][e]().indexOf(i)===0){E=b(E)}else{if(!(i in z)){z[i]=[]}z[i].push(E);continue}}for(C in E){if(l.call(E,C)){B[i][C]=E[C]}}}}}}}return Function.prototype[r].apply(o,arguments)},h=function(E){var D=z[E],F=0,C=D.length,G;for(;F<C;F++){G={};G[E]=b(D[F]);n(G)}delete z[E]},u,w=o.prototype[r]=function(){var E=u,G=o[E?j:A],H=G[e]().split("-"),F=H.length,D=this.valueOf(),C;u=t;do{C=H.slice(0,F).join("-");if(C in z){h(C)}if(C in B&&D in B[C]){return B[C][D]}}while(F-->1);if(!E&&o[j]){u=k;return w.call(D)}return D};if(typeof XMLHttpRequest===q&&typeof ActiveXObject!==q){var f=ActiveXObject;p=function(){try{return new f("Msxml2.XMLHTTP.6.0")}catch(C){}try{return new f("Msxml2.XMLHTTP.3.0")}catch(i){}try{return new f("Msxml2.XMLHTTP")}catch(D){}throw new Error("XMLHttpRequest not supported by this browser.")}}else{p=XMLHttpRequest}o[j]=o[j]||"";o[A]=m&&(m.language||m.userLanguage)||"";if(typeof document!==q){var y=document.getElementsByTagName("link"),v=y.length,g;while(v--){var d=y[v],c=(d.getAttribute("rel")||"")[e]().split(/\s+/);if(s.test(d.type)){if(x.call(c,"localizations")!==-1){n(d.getAttribute("href"))}else{if(x.call(c,"localization")!==-1){g={};g[(d.getAttribute("hreflang")||"")[e]()]=d.getAttribute("href");n(g)}}}}}}());

function getQueryParams(qs) {
    qs = qs.split('+').join(' ');
    var params = {},
        tokens,
        re = /[?&]?([^=]+)=([^&]*)/g;
    while (tokens = re.exec(qs)) {
        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    }
    return params;
}

var updateL10nStrings = function(){
  [].forEach.call(document.querySelectorAll("[data-l10n]"), function(s) {
    var trans = l(s.getAttribute('data-l10n'));
    if (trans !== s.getAttribute('data-l10n') && s.children.length === 0){
      s.innerHTML = trans;
    }
  });
}

var updateL10nNames = function(){
  [].forEach.call(document.querySelectorAll("[data-l10n]"), function(s) {
    var trans = l(s.getAttribute('data-l10n'));
    if (trans !== s.getAttribute('data-l10n')){
      s.setAttribute('name', trans);
    }
  });
}

var initL10n = function(){
  String.defaultLocale = 'en';
  String.locale = 'en';
  String.toLocaleString(trans);
  var params = getQueryParams(document.location.search);
  if (params.lang) {
    String.locale = params.lang;
  }
}
initL10n();

window.l = function(string){
  var str = string.toLocaleString();
  if(str === string){
    str = string.toLocaleString(['en']);
    console.log("Error translating: " + string);
  }
  return str
};

function addMirobotSnapTrans(lang){
  for(var item in trans[lang]){
    if(trans[lang].hasOwnProperty(item)){
      SnapTranslator.dict[lang][item] = trans[lang][item];
    }
  }
}


function l10nMenu(el_id, languages){
  var el = document.getElementById(el_id)
  if(!el) return;
  if(window.l10n) el.classList.remove('hidden');
  el.innerHTML += '<div class="wrapper"><ul class="subMenu"></ul></div>';
  var menu = el.querySelector('ul.subMenu');

  var langCb = function(lang){
    return function(){
      var loc = document.location;
      var newLoc = loc.pathname + '?lang=' + lang + loc.hash;
      window.location = newLoc;
    }
  }

  languages.map(function(locale){
    if(trans.hasOwnProperty(locale)){
      var li = document.createElement('li');
      li.addEventListener('click', langCb(locale));
      li.innerHTML = '<span class="flag-icon flag-icon-' + trans[locale].flag + '"></span> ' + trans[locale].langName;
      menu.appendChild(li);
    }
  });
  var li = document.createElement('li');
  li.innerHTML = '<a href="mailto:info@mirobot.io?subject=Mirobot%20Apps%20Translation&body=Hi,%20I\'d%20like%20to%20help%20by%20translating%20Mirobot%20Apps%20into...">Add your language...</a>';
  menu.appendChild(li);
  new MainMenu(el);
}

document.addEventListener('DOMContentLoaded', updateL10nStrings);
var nanoModal;!function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){function d(a,b){var c=document,d=a.nodeType||a===window?a:c.createElement(a),f=[];b&&(d.className=b);var g=e(),h=e(),i=function(a,b){d.addEventListener?d.addEventListener(a,b,!1):d.attachEvent("on"+a,b),f.push({event:a,handler:b})},j=function(a,b){d.removeEventListener?d.removeEventListener(a,b):d.detachEvent("on"+a,b);for(var c,e=f.length;e-->0;)if(c=f[e],c.event===a&&c.handler===b){f.splice(e,1);break}},k=function(a){var b=!1,c=function(c){b||(b=!0,setTimeout(function(){b=!1},100),a(c))};i("touchstart",c),i("mousedown",c)},l=function(a){d&&(d.style.display="block",g.fire(a))},m=function(a){d&&(d.style.display="none",h.fire(a))},n=function(){return d.style&&"block"===d.style.display},o=function(a){d&&(d.innerHTML=a)},p=function(a){d&&(o(""),d.appendChild(c.createTextNode(a)))},q=function(){if(d.parentNode){for(var a,b=f.length;b-->0;)a=f[b],j(a.event,a.handler);d.parentNode.removeChild(d),g.removeAllListeners(),h.removeAllListeners()}},r=function(a){var b=a.el||a;d.appendChild(b)};return{el:d,addListener:i,addClickListener:k,onShowEvent:g,onHideEvent:h,show:l,hide:m,isShowing:n,html:o,text:p,remove:q,add:r}}var e=a("./ModalEvent");b.exports=d},{"./ModalEvent":3}],2:[function(a,b,c){function d(a,b,c,f,g){if(void 0!==a){b=b||{};var h,i=e("div","nanoModal nanoModalOverride "+(b.classes||"")),j=e("div","nanoModalContent"),k=e("div","nanoModalButtons");i.add(j),i.add(k),i.el.style.display="none";var l,m=[];b.buttons=b.buttons||[{text:"Close",handler:"hide",primary:!0}];var n=function(){for(var a=m.length;a-->0;){var b=m[a];b.remove()}m=[]},o=function(){i.el.style.marginLeft=-i.el.clientWidth/2+"px"},p=function(){for(var a=document.querySelectorAll(".nanoModal"),b=a.length;b-->0;)if("none"!==a[b].style.display)return!0;return!1},q=function(){i.isShowing()||(d.resizeOverlay(),c.show(c),i.show(l),o())},r=function(){i.isShowing()&&(i.hide(l),p()||c.hide(c),b.autoRemove&&l.remove())},s=function(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b};return l={modal:i,overlay:c,show:function(){return f?f(q,l):q(),l},hide:function(){return g?g(r,l):r(),l},onShow:function(a){return i.onShowEvent.addListener(function(){a(l)}),l},onHide:function(a){return i.onHideEvent.addListener(function(){a(l)}),l},remove:function(){c.onRequestHide.removeListener(h),h=null,n(),i.remove()},setButtons:function(a){var b,c,d,f=a.length,g=function(a,b){var c=s(l);a.addClickListener(function(a){c.event=a||window.event,b.handler(c)})};if(n(),0===f)k.hide();else for(k.show();f-->0;)b=a[f],d="nanoModalBtn",b.primary&&(d+=" nanoModalBtnPrimary"),d+=b.classes?" "+b.classes:"",c=e("button",d),"hide"===b.handler?c.addClickListener(l.hide):b.handler&&g(c,b),c.text(b.text),k.add(c),m.push(c);return o(),l},setContent:function(b){return b.nodeType?(j.html(""),j.add(b)):j.html(b),o(),a=b,l},getContent:function(){return a}},h=c.onRequestHide.addListener(function(){b.overlayClose!==!1&&i.isShowing()&&l.hide()}),l.setContent(a).setButtons(b.buttons),document.body.appendChild(i.el),l}}var e=a("./El"),f=document,g=function(a){var b=f.documentElement,c="scroll"+a,d="offset"+a;return Math.max(f.body[c],b[c],f.body[d],b[d],b["client"+a])};d.resizeOverlay=function(){var a=f.getElementById("nanoModalOverlay");a.style.width=g("Width")+"px",a.style.height=g("Height")+"px"},b.exports=d},{"./El":1}],3:[function(a,b,c){function d(){var a={},b=0,c=function(c){return a[b]=c,b++},d=function(b){b&&delete a[b]},e=function(){a={}},f=function(){for(var c=0,d=b;d>c;++c)a[c]&&a[c].apply(null,arguments)};return{addListener:c,removeListener:d,removeAllListeners:e,fire:f}}b.exports=d},{}],4:[function(a,b,c){var d=a("./ModalEvent"),e=function(){function b(){if(!g.querySelector("#nanoModalOverlay")){var a=e("style"),b=a.el,h=g.querySelectorAll("head")[0].childNodes[0];h.parentNode.insertBefore(b,h);var i=".nanoModal{position:absolute;top:100px;left:50%;display:none;z-index:9999;min-width:300px;padding:15px 20px 10px;-webkit-border-radius:10px;-moz-border-radius:10px;border-radius:10px;background:#fff;background:-moz-linear-gradient(top,#fff 0,#ddd 100%);background:-webkit-gradient(linear,left top,left bottom,color-stop(0%,#fff),color-stop(100%,#ddd));background:-webkit-linear-gradient(top,#fff 0,#ddd 100%);background:-o-linear-gradient(top,#fff 0,#ddd 100%);background:-ms-linear-gradient(top,#fff 0,#ddd 100%);background:linear-gradient(to bottom,#fff 0,#ddd 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#dddddd', GradientType=0)}.nanoModalOverlay{position:absolute;top:0;left:0;width:100%;height:100%;z-index:9998;background:#000;display:none;-ms-filter:\"alpha(Opacity=50)\";-moz-opacity:.5;-khtml-opacity:.5;opacity:.5}.nanoModalButtons{border-top:1px solid #ddd;margin-top:15px;text-align:right}.nanoModalBtn{color:#333;background-color:#fff;display:inline-block;padding:6px 12px;margin:8px 4px 0;font-size:14px;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.nanoModalBtn:active,.nanoModalBtn:focus,.nanoModalBtn:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.nanoModalBtn.nanoModalBtnPrimary{color:#fff;background-color:#428bca;border-color:#357ebd}.nanoModalBtn.nanoModalBtnPrimary:active,.nanoModalBtn.nanoModalBtnPrimary:focus,.nanoModalBtn.nanoModalBtnPrimary:hover{color:#fff;background-color:#3071a9;border-color:#285e8e}";b.styleSheet?b.styleSheet.cssText=i:a.text(i),c=e("div","nanoModalOverlay nanoModalOverride"),c.el.id="nanoModalOverlay",g.body.appendChild(c.el),c.onRequestHide=d();var j=function(){c.onRequestHide.fire()};c.addClickListener(j),e(g).addListener("keydown",function(a){var b=a.which||a.keyCode;27===b&&j()});var k,l=e(window);l.addListener("resize",function(){k&&clearTimeout(k),k=setTimeout(f.resizeOverlay,100)}),l.addListener("orientationchange",function(){for(var a=0;3>a;++a)setTimeout(f.resizeOverlay,1e3*a+200)})}}var c,e=a("./El"),f=a("./Modal"),g=document;document.body&&b();var h=function(a,d){return b(),f(a,d,c,h.customShow,h.customHide)};return h.resizeOverlay=f.resizeOverlay,h}();nanoModal=e},{"./El":1,"./Modal":2,"./ModalEvent":3}]},{},[1,2,3,4]),"undefined"!=typeof window&&("function"==typeof window.define&&window.define.amd&&window.define(function(){return nanoModal}),window.nanoModal=nanoModal),"undefined"!=typeof module&&(module.exports=nanoModal);

var nanoConfirm = function(text, cb){
  var confirm = nanoModal(text, {
      autoRemove: true,
      buttons: [{
          text: "OK",
          handler: function(){
            confirm.hide();
            cb(true);
          },
          primary: true
      }, {
          text: "Cancel",
          handler: function(modal) {
            confirm.hide();
            cb(false);              
          },
      }]
      });
  confirm.show();
  return confirm
}
;












